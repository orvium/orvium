{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/admin/platform/media": {
      "post": {
        "operationId": "AdminController_uploadLogoImage",
        "summary": "Upload images to the platform toolbar",
        "description": "POST method to upload an image to the platform's media storage.\nRequires admin privileges and checks for valid file extensions.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlatformImageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUrlDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/admin/platform/media/confirm": {
      "patch": {
        "operationId": "AdminController_uploadLogoImageConfirmation",
        "summary": "Confirm logo image upload",
        "description": "PATCH method to confirm the upload of a logo to the platform.\nChecks that the uploaded file is accessible and logs the confirmation.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUploadConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/bibtex": {
      "get": {
        "operationId": "BibtexController_getBibtexDoi",
        "summary": "Get the metadata for a DOI associated with a bibtex reference",
        "description": "GET - Retrieves Bibtex reference metadata from a given DOI.",
        "parameters": [
          {
            "name": "doi",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BibtexReferences"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/bibtex/citationsToBibtex": {
      "post": {
        "operationId": "BibtexController_transformCitationsToBibtex",
        "summary": "Parse inline style citations to bibtex and adds to the deposit",
        "description": "POST- Get the metadata for a DOI associated with a deposit.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CitationsToBibtexBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BibtexReferences"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/bibtex/files/bibtex": {
      "patch": {
        "operationId": "BibtexController_uploadBibtexFile",
        "summary": "Uploaded a bibtex file ",
        "description": "PATCH - Accepts a Bibtex file in string format and parses it into JSON, returning the Bibtex references.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadBibtexFilePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BibtexReferences"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/blockchain": {
      "get": {
        "operationId": "BlockchainController_getBlockchainNetworks",
        "summary": "Get blockchain networks",
        "description": "GET - Retrieves an array of blockchain networks currently configured in the application.\nThis endpoint maps to a GET request that returns data in the form of an array of BlockchainNetworkDTO.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockchainNetworkDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/call": {
      "get": {
        "operationId": "CallController_getCalls",
        "summary": "List all calls for papers/abstracts",
        "description": "Retrieves a list of all calls, optionally filtered by a community. This can include both public and\nmoderation-required calls depending on the user's role within the specified community.",
        "parameters": [
          {
            "name": "community",
            "required": false,
            "in": "query",
            "description": "Optional filtering by community",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CallController_createCall",
        "summary": "Create a call for papers/abstracts",
        "description": "POST - Creates a new call for papers or abstracts based on the details provided in the request body.\nThe new call is initially not visible publicly until explicitly updated.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/call/{id}": {
      "get": {
        "operationId": "CallController_getCall",
        "summary": "Retrieve a call for papers/abstracts",
        "description": "GET - Retrieves detailed information about a specific call identified by its ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "CallController_updateCall",
        "summary": "Update a call for paper/abstract",
        "description": "PATCH - Updates an existing call with new data provided through the request payload.\nOnly fields provided in the payload will be updated; others will remain unchanged.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CallController_deleteCall",
        "summary": "Delete a call for papers/abstract",
        "description": "Permanently deletes a call and its associated data. This action cannot be undone.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/comments": {
      "get": {
        "operationId": "CommentsController_getComments",
        "summary": "List all comments",
        "description": "GET - Retrieves all comments associated with a specific resource. Filters by parent comment if specified.",
        "parameters": [
          {
            "name": "resource",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "required": false,
            "in": "query",
            "description": "Optional filter by parent comment ID to retrieve comment replies.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CommentsController_createComment",
        "summary": "Create a comment",
        "description": "POST - Creates a new comment based on the provided payload. Validates user permissions before proceeding.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/comments/{id}": {
      "delete": {
        "operationId": "CommentsController_deleteComment",
        "summary": "Delete a comment",
        "description": "DELETE - Deletes a comment and its replies, if any. Validates user permissions before proceeding.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities": {
      "get": {
        "operationId": "CommunitiesController_getCommunities",
        "summary": "Get all communities",
        "description": "GET - Retrieves a list of all communities available in the platform. This list is not filtered and includes every community\nthat has been created and stored in the database.\nThe communities are returned as a list of populated DTOs which include detailed information suitable for client-side use.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunityPopulatedDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "CommunitiesController_createCommunity",
        "summary": "Create a new community",
        "description": "POST - Creates a new community with the details provided in the request body. Initially, the community\nis not publicly visible and is marked as a draft. The creator of the community is automatically\nassigned as a moderator.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/mycommunities": {
      "get": {
        "operationId": "CommunitiesController_getMyCommunities",
        "summary": "Get my communities",
        "description": "GET - Retrieves all communities associated with the logged-in user, including those where the user\nis a moderator, has made deposits, or has reviews. It ensures that each community is only\nlisted once even if the user has multiple roles or contributions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunityPopulatedDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/pending-approval": {
      "get": {
        "operationId": "CommunitiesController_getCommunitiesPendingApproval",
        "summary": "Get communities pending approval",
        "description": "GET - Retrieves all communities that are currently pending approval.\nThis method is typically used by administrators to manage community approvals.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunityPopulatedDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/communities/{communityId}/moderator/{id}": {
      "delete": {
        "operationId": "CommunitiesController_deleteModerator",
        "summary": "Delete a community",
        "description": "DELETE - Deletes a moderator from a community. This method ensures that the operation does not remove the last moderator and\nchecks that the requesting user has the necessary permissions.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{communityId}/moderator/{userObjectId}": {
      "patch": {
        "operationId": "CommunitiesController_updateModerator",
        "summary": "Update moderator information",
        "description": "PATCH - Updates the information of a moderator within a community.\nOnly users with appropriate permissions can perform this operation.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userObjectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModeratorUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityModeratorDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}": {
      "get": {
        "operationId": "CommunitiesController_getCommunity",
        "summary": "Get community by id",
        "description": "GET - Retrieves detailed information about a specific community by its ID. Depending on the user's\npermissions, different levels of detail might be returned.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommunityPopulatedDTO"
                    },
                    {
                      "$ref": "#/components/schemas/CommunityPrivateDTO"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "CommunitiesController_deleteCommunity",
        "summary": "Delete a community",
        "description": "DETELE - Deletes a community permanently if there are no associated deposits or sessions.\nThis action cannot be undone and requires the user to have deletion permissions.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CommunitiesController_updateCommunity",
        "summary": "Update a community",
        "description": "PATCH - Updates the details of an existing community based on the provided payload.\nSensitive data like API keys are encrypted before updating the community details.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/accept": {
      "patch": {
        "operationId": "CommunitiesController_acceptCommunity",
        "summary": "Accept a community",
        "description": "PATCH - Changes the status of a community to 'published' if it is currently in 'pending approval' status.\nThis method also creates a related event for the change.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/confirm/images": {
      "patch": {
        "operationId": "CommunitiesController_uploadImagesConfirmation",
        "summary": "Confirm community image upload",
        "description": "PATCH - Confirms the upload of a community image after checking the file type and\nupdating the community's image URL based on the type. This method updates the\nimage URLs for logos, banners, or cards based on the provided image type.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityUploadConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/images": {
      "post": {
        "operationId": "CommunitiesController_uploadImages",
        "summary": "Upload images to a community",
        "description": "POST - Uploads custom images to a community's gallery or media storage.\nThis method checks for file type validity and handles the storage using AWS S3 services.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUrlDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/deposits": {
      "get": {
        "operationId": "CommunitiesController_getModeratorDeposits",
        "summary": "Get all deposits in a community",
        "description": "GET - Retrieves all the deposits within a community that are moderated by the user.\nThis includes filtering options for pagination and sorting.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "draft",
                "pending approval",
                "published",
                "preprint",
                "rejected",
                "merged"
              ],
              "type": "string"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "moderator",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acceptedFor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositsQueryDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/deposits/emails": {
      "get": {
        "operationId": "CommunitiesController_getModeratorDepositsEmails",
        "summary": "Get all deposits creators emails in a community",
        "description": "GET - Retrieves emails of all users who created deposits within the specified community.\nUseful for community managers to contact deposit creators directly.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "draft",
                "pending approval",
                "published",
                "preprint",
                "rejected",
                "merged"
              ],
              "type": "string"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "moderator",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acceptedFor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailUsersDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/invitations": {
      "get": {
        "operationId": "CommunitiesController_getCommunityInvites",
        "summary": "Returns the community invitations filtered",
        "description": "GET - Retrieves a filtered list of invitations for a specific community based on various criteria.\nThis method is protected by JWT authentication and requires the user to have moderation rights over the community.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "pending",
                "accepted",
                "rejected"
              ],
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateLimit",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteQueryDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/no-invitations": {
      "get": {
        "operationId": "CommunitiesController_getCommunityDepositsWithoutInvites",
        "summary": "Return deposits without invitations",
        "description": "GET - Fetches deposits within a community that have no associated invitations,\nwhich might be required for audits or compliance checks.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/reviews": {
      "get": {
        "operationId": "CommunitiesController_getModeratorReviews",
        "summary": "Get all reviews in a community",
        "description": "GET - Fetches all reviews associated with a community, subject to various filters such as review kind and status.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "reviewKind",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "peer review",
                "copy editing"
              ],
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewStatus",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "draft",
                "published",
                "pending approval"
              ],
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsPopulatedQueryDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/reviews/emails": {
      "get": {
        "operationId": "CommunitiesController_getModeratorReviewsEmails",
        "summary": "Get all reviews creator emails in a community",
        "description": "GET - Fetches emails of all users who have created reviews within the specified community.\nThis is particularly useful for community managers or moderators who need to contact review creators.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "reviewKind",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "peer review",
                "copy editing"
              ],
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewStatus",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "draft",
                "published",
                "pending approval"
              ],
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailUsersDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderate/submissions/export": {
      "get": {
        "operationId": "CommunitiesController_exportSubmissions",
        "summary": "Exports submissions to csv",
        "description": "GET - Exports data about submissions in a community to a CSV file for reporting or analysis purposes.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/moderator": {
      "post": {
        "operationId": "CommunitiesController_addModerator",
        "summary": "Add a new moderator to a community",
        "description": "POST - Adds a new moderator to a specified community. This operation checks if the user already exists as a moderator\nto avoid duplicates and requires user to have update permissions on the community.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/send-emails": {
      "post": {
        "operationId": "CommunitiesController_sendEmailToUsers",
        "summary": "Send email to users",
        "description": "Sends an email to multiple users within a community. This method is typically used for notifications or updates.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCommunityEmailsDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/status": {
      "patch": {
        "operationId": "CommunitiesController_updateCommunityStatus",
        "summary": "Update community status",
        "description": "PATCH - Updates the status of a specific community. This operation requires admin privileges.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommunityStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/communities/{id}/submit": {
      "patch": {
        "operationId": "CommunitiesController_submitCommunity",
        "summary": "Submit a community for approval",
        "description": "PATCH - Submits a community for approval by changing its status to pending approval.\nThis method also triggers notifications to inform relevant users about the status change.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/configuration/videos": {
      "get": {
        "operationId": "ConfigurationController_getVideos",
        "summary": "List videos",
        "description": "Retrieves a list of configured videos from the system. These videos are typically used to guide users\nthrough the application's features or provide other informational content.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversations": {
      "get": {
        "operationId": "ConversationsController_getConversations",
        "summary": "List conversations",
        "description": "GET - Retrieves all conversations for the logged-in user (chat), checking for unread messages\nand applying user-specific transformations for data privacy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationPopulatedDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ConversationsController_createConversation",
        "summary": "Create a conversation",
        "description": "POST - Creates a new conversation based on the provided recipient and initial message data.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/conversations/dummyNotification": {
      "post": {
        "operationId": "ConversationsController_dummyNotification",
        "summary": "Fake endpoint",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/conversations/{id}": {
      "get": {
        "operationId": "ConversationsController_getConversation",
        "summary": "Retrieve a conversation",
        "description": "GET - Retrieves a specific conversation by its ID, ensuring the requesting user has permission to access it.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ConversationsController_addMessage",
        "summary": "Create a message",
        "description": "PATCH - Adds a new message to an existing conversation, ensuring all participants can view the message.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits": {
      "post": {
        "operationId": "DepositController_createDeposit",
        "summary": "Create a new deposit",
        "description": "POST - Creates a new deposit based on the provided data. This method handles the business logic\nfor validating and storing the new deposit data, ensuring that the user has the necessary\npermissions, and that the associated community data is correctly linked and populated.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "DepositController_getDeposits",
        "summary": "Get a list of deposits",
        "description": "Get a list of deposits",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "communityChildren[]",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creator",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "community",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "doi",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orcid",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discipline",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "draft",
                "pending approval",
                "published",
                "preprint",
                "rejected",
                "merged"
              ],
              "type": "string"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasReviews",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositsQueryDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deposits/createWithDOI": {
      "post": {
        "operationId": "DepositController_createWithDOI",
        "summary": "Create a deposit by importing from DOI",
        "description": "POST - Creates a new deposit by importing metadata from the url that the DOI points to.\nThe information is extracted using metatags from the HTML webpage, normally `citation_` metatags.\nThe main publication file is also uploaded to the new publication created if `citation_pdf_url` is available.\nIf the DOI points to a Figshare repository, it uses the Figshare API to retrieve some metadata and files.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositWithDoiDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/myDeposits": {
      "get": {
        "operationId": "DepositController_getMyDeposits",
        "summary": "Get deposits created by the logged user",
        "description": "Get all the deposits created by the logged user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositPopulatedDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/pendingApproval": {
      "get": {
        "operationId": "DepositController_getDepositsPendingApproval",
        "summary": "Get deposits pending approval",
        "description": "Get pending approval deposits",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositPopulatedDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deposits/starred": {
      "get": {
        "operationId": "DepositController_getMyStarredDeposits",
        "summary": "Get starred deposits of the logged user",
        "description": "Get all the starred deposits of the logged user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositPopulatedDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/topDisciplines": {
      "get": {
        "operationId": "DepositController_getTopDisciplines",
        "summary": "Get top disciplines",
        "description": "Returns the 12 top disciplines of all the deposits in preprint, review and published",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopDisciplinesDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deposits/{id}": {
      "get": {
        "operationId": "DepositController_getDeposit",
        "summary": "Get a deposit by its id",
        "description": "Get a deposit by its id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "DepositController_updateDeposit",
        "summary": "Update a deposit",
        "description": "Update a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepositDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "DepositController_deleteDeposit",
        "summary": "Delete deposit",
        "description": "Deletes a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/accept": {
      "patch": {
        "operationId": "DepositController_acceptDeposit",
        "summary": "Accept a deposit",
        "description": "Accept a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateDepositPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/assign": {
      "patch": {
        "operationId": "DepositController_assignEditor",
        "summary": "Assigns an editor to the given deposit",
        "description": "Assigns an editor to the given deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEditorPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/assignEditorialDecision": {
      "patch": {
        "operationId": "DepositController_assignEditorialDecision",
        "summary": "Assign as poster/presentation talk",
        "description": "Assign an editorial decision to the publication.\nThis method is used in conferences to accept submissions as a poster or a presentation talk.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEditorialDecisionPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/bibtex": {
      "get": {
        "operationId": "DepositController_getBibtex",
        "summary": "Get deposit BibTeX citation",
        "description": "Get deposit BibTeX citation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deposits/{id}/citation": {
      "get": {
        "operationId": "DepositController_getCitation",
        "summary": "Get deposit citation",
        "description": "Get deposit citation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Citation"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deposits/{id}/createRevision": {
      "post": {
        "operationId": "DepositController_createDepositRevision",
        "summary": "Create a new revision of the deposit",
        "description": "Creates a new revision of the deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/doi": {
      "post": {
        "operationId": "DepositController_createDoi",
        "summary": "Create a DOI for a deposit using DataCite/Crossref provider",
        "description": "Create a DOI for a deposit using DataCite/Crossref provider.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringDataPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "DepositController_getDoi",
        "summary": "Get the metadata for a DOI associated with a deposit",
        "description": "Get the metadata for a DOI associated with a deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/doi-preview": {
      "get": {
        "operationId": "DepositController_previewDOIRegistration",
        "summary": "Preview DOI Metadata registration for DataCite/Crossref provider",
        "description": "Preview DOI Metadata registration for DataCite/Crossref provider.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringDataPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/draft": {
      "patch": {
        "operationId": "DepositController_draftDeposit",
        "summary": "Update the status of a deposit to draft",
        "description": "Update the status of a deposit to draft",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateDepositPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/files": {
      "post": {
        "operationId": "DepositController_uploadFile",
        "summary": "Uploads a file to a deposit",
        "description": "Uploads a file to a deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isMainFile",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "replacePDF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUrlDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/files/confirm": {
      "patch": {
        "operationId": "DepositController_uploadFileConfirmationDeposit",
        "summary": "Confirm uploaded file in a deposit",
        "description": "Confirms an uploaded file",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFilePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/files/{filename}": {
      "get": {
        "operationId": "DepositController_getDepositFile",
        "summary": "Gets a file for a deposit",
        "description": "Gets a file for a deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "DepositController_deleteDepositFile",
        "summary": "Delete deposit file",
        "description": "Delete deposit file.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/media/{image}": {
      "get": {
        "operationId": "DepositController_getDepositImages",
        "summary": "Get deposit images",
        "description": "Get deposit images.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/deposits/{id}/merge": {
      "patch": {
        "operationId": "DepositController_mergeRevisions",
        "summary": "Merges a revision into a deposit",
        "description": "Merges the files of a revision of a deposit into the original deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/pdf": {
      "get": {
        "operationId": "DepositController_getDepositFilePDF",
        "summary": "Gets the PDF file for a deposit",
        "description": "Gets the PDF file for a deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/deposits/{id}/pending-approval": {
      "patch": {
        "operationId": "DepositController_depositToPendingApproval",
        "summary": "Return deposit to pending approval",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateDepositPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/publication.pdf": {
      "get": {
        "operationId": "DepositController_getDepositFilePDF_2",
        "summary": "Gets the PDF file for a deposit",
        "description": "Gets the PDF file for a deposit.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/deposits/{id}/publish": {
      "patch": {
        "operationId": "DepositController_publishDeposit",
        "summary": "Publish a deposit",
        "description": "Publish a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/reject": {
      "patch": {
        "operationId": "DepositController_rejectDeposit",
        "summary": "Get the latest version of a deposit",
        "description": "Get the latest version of a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateDepositPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/submit": {
      "patch": {
        "operationId": "DepositController_submitDeposit",
        "summary": "Submit a deposit to a community",
        "description": "Submit a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/deposits/{id}/versions": {
      "get": {
        "operationId": "DepositController_getDepositVersions",
        "summary": "Get all versions of a deposit",
        "description": "Get all versions of a deposit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositPopulatedDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/disciplines": {
      "get": {
        "operationId": "DisciplineController_getDisciplines",
        "summary": "List diciplines",
        "description": "List all scientific disciplines available in the application. Disciplines are used to group publications by scientific field.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisciplineDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/doi-log/{id}": {
      "get": {
        "operationId": "DoiLogController_getDoiLog",
        "summary": "Get doiLog by resource id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoiLogDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/domains/blocked": {
      "get": {
        "operationId": "DomainsController_isDomainBlocked",
        "summary": "Verify a domain",
        "description": "Verifies if the specified domain is banned in the application. Users cannot sign up using an email address which domain is banned.\nReturns `true` if the domain is banned, `false` otherwise.",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback": {
      "post": {
        "operationId": "FeedbackController_createFeedback",
        "summary": "Create feedback",
        "description": "Creates a new feedback with the details specified in the request payload.\nUsers can create Feedback objects to inform system admins about technical problems, ask for new features, or notify about inappropriate content.\nSystem admins will receive an email notification with the details of the feedback.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/institutions": {
      "get": {
        "operationId": "InstitutionController_getInstitution",
        "summary": "List institutions",
        "description": "Retrieves an institution configured in the application. You need to supply the domain name of the institution (e.g. myinstitution.org).\nIf the institution is available, this endpoint will return details such as institution's name, country, etc.",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstitutionDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "InstitutionController_createInstitution",
        "summary": "Create an institution",
        "description": "Creates a new institution with the details specified in the request payload.\nIt will throw an error if another institution with the same domain already exists.\nOnly system admins can create new institutions.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstitutionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstitutionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invites": {
      "post": {
        "operationId": "InviteController_createInvite",
        "summary": "Create invitation",
        "description": "Creates an invitation to peer review or copy editing for the publication specified in the request payload.\n@Body CreateInviteDto object\n@return InviteDocument object created",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "InviteController_getDepositInvites",
        "summary": "List invitations",
        "description": "List all the invitations for the specified deposit ID.\n@return InviteDocument objects array",
        "parameters": [
          {
            "name": "depositId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitePopulatedDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invites/hasBeenInvited": {
      "get": {
        "operationId": "InviteController_hasBeenInvited",
        "summary": "Verify if invited",
        "description": "Verifies if you have been invited to peer review or copy editing the specified deposit ID.\nReturns `true` if you have been invited, `false` otherwise.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invites/invitePreview": {
      "post": {
        "operationId": "InviteController_postInvitePreview",
        "summary": "",
        "description": "Create invitation\n@Body CreateInviteDto object\n@return InviteDocument object created",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewHtmlPreviewDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/invites/myInvites": {
      "get": {
        "operationId": "InviteController_myInvites",
        "summary": "List my invitations",
        "description": "List all invitations for peer review and copy editing that you have been invited to.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "pending",
                "accepted",
                "rejected"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteQueryDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invites/sentInvites": {
      "get": {
        "operationId": "InviteController_mySentInvites",
        "summary": "List my sent invitations",
        "description": "List all invitations for peer review and copy editing that you have sent.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteQueryDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invites/{id}": {
      "patch": {
        "operationId": "InviteController_updateInvite",
        "summary": "Update invitation",
        "description": "Updates an invitation status to accepted or rejected if you are the addressee\n@return InviteDocument objects",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitePopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/setup": {
      "post": {
        "operationId": "IthenticateController_setupIThenticate",
        "summary": "Setup iThenticate",
        "description": "Setups the iThenticate account for the specified community",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhookPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/eula": {
      "get": {
        "operationId": "IthenticateController_getIThenticateEULA",
        "summary": "Retrieve iThenticate EULA",
        "description": "Retrieves the iThenticate EULA of the specified community",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaVersionClass"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/eula/acceptance": {
      "get": {
        "operationId": "IthenticateController_getIThenticateEULAAcceptance",
        "summary": "Retrieve EULA acceptance",
        "description": "Retrieves the EULA acceptance for the current user",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EulaAcceptListItemClass"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/eula/{version}/accept": {
      "post": {
        "operationId": "IthenticateController_acceptIThenticateEULA",
        "summary": "Accept iThenticate EULA",
        "description": "Accepts the iThenticate EULA",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaAcceptListItemClass"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/status": {
      "get": {
        "operationId": "IthenticateController_getIThenticateStatus",
        "summary": "Retrieve iThenticate status",
        "description": "Retrieves the status of the iThenticate setup for the specified community",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhookStatusPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions": {
      "post": {
        "operationId": "IthenticateController_createIThenticateSubmission",
        "summary": "Create submission",
        "description": "Creates a new iThenticate submission.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IthenticatePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleSubmissionResponseClass"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions/{depositId}": {
      "get": {
        "operationId": "IthenticateController_getIThenticateSubmissionInfo",
        "summary": "Retrieve an iThenticate submission",
        "description": "Retrieves an iThenticate submission already created.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionClass"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions/{depositId}/similarity": {
      "get": {
        "operationId": "IthenticateController_getIThenticateReport",
        "summary": "Retrieve similarity report",
        "description": "Retrieves an iThenticate similarity report that has been already generated.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarityMetadata"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions/{submissionId}": {
      "patch": {
        "operationId": "IthenticateController_uploadFileToSubmission",
        "summary": "Upload file",
        "description": "Upload the publication files to an iThenticate submission already created.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IthenticatePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions/{submissionId}/similarity": {
      "patch": {
        "operationId": "IthenticateController_generateSimilarityReport",
        "summary": "Generate similarity report",
        "description": "Generates a new iThenticate similarity report for a submission already created.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ithenticate/{communityId}/submissions/{submissionId}/viewer-url": {
      "get": {
        "operationId": "IthenticateController_getSimilarityReportURL",
        "summary": "Retrieve similarity report URL",
        "description": "Retrieve the url hosted by iThenticate to view and interact with a similarity report already generated",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarityViewerUrlResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/message": {
      "get": {
        "operationId": "MessageController_getConversationMessages",
        "summary": "List conversation messages",
        "description": "List the messages of a chats.",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeDate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/notifications/myNotifications": {
      "get": {
        "operationId": "NotificationController_getMyNotifications",
        "summary": "List notifications",
        "description": "List all app notifications for the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppNotificationDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/notifications/{id}/read": {
      "patch": {
        "operationId": "NotificationController_markNotificationAsRead",
        "summary": "Mark notification as read",
        "description": "Marks a notification as read.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppNotificationDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/offboarding/delete": {
      "delete": {
        "operationId": "OffboardingController_deleteProfile",
        "summary": "Delete a profile",
        "description": "Deletes the user account, only if it has no associated resources.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/orcid/{id}": {
      "get": {
        "operationId": "OrcidController_getOrcidData",
        "summary": "Get orcid author info",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment/checkout": {
      "post": {
        "operationId": "PaymentController_checkout",
        "summary": "Create checkout",
        "description": "Creates a Stripe Checkout Session. A Checkout Session represents your customer's session as they pay for one-time purchases.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeCheckoutDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment/myPayments": {
      "get": {
        "operationId": "PaymentController_getUserPayments",
        "summary": "",
        "description": "List a user payments in Orvium.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutSessionPaymentsDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payment/onboard": {
      "post": {
        "operationId": "PaymentController_onboard",
        "summary": "Setup Stripe account",
        "description": "Setups the Stripe account for the specified community",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeOnboardPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeOnboardingUrl"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment/stripeProducts": {
      "get": {
        "operationId": "PaymentController_getStripeProducts",
        "summary": "List products",
        "description": "List products created in Stripe for the specified community. These products should have been created previous in the Stripe dashboard.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StripeProductDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payment/success": {
      "get": {
        "operationId": "PaymentController_getSuccessInfo",
        "summary": "Retrieve successful checkout",
        "description": "Retrieves the details of the purchase if it has been successful.",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communityId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StripeLineItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment/{communityId}": {
      "get": {
        "operationId": "PaymentController_getCommunityPayments",
        "summary": "",
        "description": "List a Community payments in Orvium.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "paymentStatus",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentQueryDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/push-notifications": {
      "post": {
        "operationId": "PushNotificationsController_createPushNotificationsSubscription",
        "summary": "Create subscription",
        "description": "Stores the notifications subscription objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushSubscriptionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushSubscriptionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PushNotificationsController_checkPushNotificationsSubscription",
        "summary": "Verify subscription",
        "description": "Verifies if the current user is subscribed to receive push notifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/reviews": {
      "get": {
        "operationId": "ReviewController_getReviews",
        "summary": "Get a list of reviews",
        "description": "Retrieves a list of reviews, optionally filtered by deposit ID or creator ID.",
        "parameters": [
          {
            "name": "depositId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creator",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewPopulatedDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "ReviewController_createReview",
        "summary": "Create a new review",
        "description": "Create a new review.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/myReviews": {
      "get": {
        "operationId": "ReviewController_getMyReviews",
        "summary": "Get the logged in user's reviews",
        "description": "Retrieve the logged-in user's reviews.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsPopulatedQueryDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}": {
      "get": {
        "operationId": "ReviewController_getReview",
        "summary": "Get a review by ID",
        "description": "Retrieve a review by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "ReviewController_updateReview",
        "summary": "Update a review",
        "description": "Update a review by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "ReviewController_deleteReview",
        "summary": "Delete a review",
        "description": "Delete a review by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}/doi": {
      "post": {
        "operationId": "ReviewController_createDoiReview",
        "summary": "Create a DOI for a review using DataCite/Crossref provider",
        "description": "Create a DOI for a review using DataCite/Crossref provider.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringDataPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ReviewController_getDoiReview",
        "summary": "Get the metadata for a DOI associated with a review",
        "description": "Get the metadata for a DOI associated with a review.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/reviews/{id}/doi-preview": {
      "get": {
        "operationId": "ReviewController_previewDOIRegistrationReview",
        "summary": "Preview DOI Metadata registration for DataCite/Crossref provider",
        "description": "Preview DOI Metadata registration for DataCite/Crossref provider",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringDataPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/reviews/{id}/draft": {
      "patch": {
        "operationId": "ReviewController_draftReview",
        "summary": "Set review's status to draft",
        "description": "Change the status of a review back to draft by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateReviewPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}/file": {
      "post": {
        "operationId": "ReviewController_uploadReviewFile",
        "summary": "Upload a file into a review",
        "description": "Upload a file into a review.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isMainFile",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUrlDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}/files/confirm": {
      "patch": {
        "operationId": "ReviewController_uploadFileConfirmationReview",
        "summary": "Confirm the file upload for a review",
        "description": "Confirms the file upload for a review.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFilePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}/files/{filename}": {
      "get": {
        "operationId": "ReviewController_getReviewFile",
        "summary": "Get the file of a review",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "ReviewController_deleteReviewExtraFile",
        "summary": "Delete review file",
        "description": "Delete review file.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/reviews/{id}/media/{image}": {
      "get": {
        "operationId": "ReviewController_getReviewImages",
        "summary": "Get review images",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/reviews/{id}/published": {
      "patch": {
        "operationId": "ReviewController_publishedReview",
        "summary": "Update a review",
        "description": "Change the review status to published.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateReviewPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}/submit": {
      "patch": {
        "operationId": "ReviewController_submitReview",
        "summary": "Update a review",
        "description": "Change the review status to published.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewPopulatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session": {
      "get": {
        "operationId": "SessionController_getSessions",
        "summary": "List conference sessions",
        "description": "List all conference sessions for the specified community ID. Optional filtering parameters are available.",
        "parameters": [
          {
            "name": "communityId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newTrackTimestamp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "dates",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "SessionController_createSession",
        "summary": "Create a session",
        "description": "Creates a conference session with the details specified in the request payload.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/session/{id}": {
      "get": {
        "operationId": "SessionController_getSession",
        "summary": "Retrieve session",
        "description": "Retrieves a conference session.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "SessionController_updateSession",
        "summary": "Update a session",
        "description": "Updates a conference session by setting the values of the request payload.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SessionController_deleteSession",
        "summary": "Delete a session",
        "description": "Permanently deletes a conference session. It cannot be undone.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/templates": {
      "get": {
        "operationId": "TemplateController_getAllTemplates",
        "summary": "List templates",
        "description": "List all email templates. Optional filtering by community ID.",
        "parameters": [
          {
            "name": "communityId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "TemplateController_createTemplate",
        "summary": "Create a template",
        "description": "Creates a new email template.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/templates/{id}": {
      "patch": {
        "operationId": "TemplateController_updateTemplate",
        "summary": "Update a template",
        "description": "Updates the specified email template by setting the values of the request payload.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communityId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/templates/{id}/makeCopy": {
      "post": {
        "operationId": "TemplateController_copyOfTemplate",
        "summary": "Create a template copy",
        "description": "Creates a new template as a copy of one already created.\nThis method is used to allow communities to customize the default templates.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateCreateCustomizedDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/templates/{id}/sendEmail": {
      "patch": {
        "operationId": "TemplateController_tryEmail",
        "summary": "Send test email",
        "description": "Sends a test email with the selected template to the current user.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communityId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/templates/{name}": {
      "get": {
        "operationId": "TemplateController_getTemplateByName",
        "summary": "Retrieve template",
        "description": "Retrieves an email template",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communityId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/confirm/profile/images": {
      "patch": {
        "operationId": "UserController_uploadUserImagesConfirmation",
        "summary": "Confirm image upload",
        "description": "Confirms that an image has been correctly uploaded to the AWS S3 storage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUploadConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/confirmEmail": {
      "patch": {
        "operationId": "UserController_confirmEmail",
        "summary": "Confirm email",
        "description": "Confirms an email address using a numeric code. This method is used during onboarding to verify the user's email adress.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/permissions": {
      "get": {
        "operationId": "UserController_getPermissions",
        "summary": "Retrieve public profile",
        "description": "Retrieves the public information of the specified profile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile": {
      "get": {
        "operationId": "UserController_getMyProfile",
        "summary": "Retrieve profile",
        "description": "Retrieves all details (public and private) of the profile for the current user.",
        "parameters": [
          {
            "name": "Authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteToken",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "UserController_updateProfile",
        "summary": "Update a profile",
        "description": "Updates the current user profile by setting the values of the request payload.\nAny parameters not provided will be left unchanged.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile/images": {
      "post": {
        "operationId": "UserController_uploadProfileImages",
        "summary": "Upload image file",
        "description": "Uploads image files to the user's profile.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileImageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUrlDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile/{nickname}": {
      "get": {
        "operationId": "UserController_getPublicProfile",
        "summary": "Retrieve public profile",
        "description": "Retrieves the public information of the specified profile",
        "parameters": [
          {
            "name": "nickname",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublicDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/profiles": {
      "get": {
        "operationId": "UserController_getProfiles",
        "summary": "List profiles",
        "description": "Returns a list of user profiles previously created. The profiles are returned unordered.",
        "parameters": [
          {
            "name": "query",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPrivateDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/request-data": {
      "get": {
        "operationId": "UserController_requestData",
        "summary": "Get a JSON of the personal data",
        "description": "Returns a list of user profiles previously created. The profiles are returned unordered.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/sendConfirmationEmail": {
      "post": {
        "operationId": "UserController_sendConfirmationEmail",
        "summary": "Send confirmation email",
        "description": "Sends a confirmation email to the user. This method is used during onboarding to verify the user's email address.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/sendInvitations": {
      "post": {
        "operationId": "UserController_sendInvitations",
        "summary": "Send invitation email",
        "description": "Sends invitations emails to the specified list of emails to sign up into the platform.\nMaximum number of emails provided is 5.\nMaximum number of invitations that a user can send is 10.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInviteBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/stopImpersonation": {
      "patch": {
        "operationId": "UserController_stopImpersonation",
        "summary": "Stop impersonation",
        "description": "Stops an impersonation that is currently used by a system admin.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Orvium API",
    "description": "\nThis is the OpenAPI 3.0 specification for the Orvium REST API.\n\nSome useful links:\n\n- [Orvium website](https://orvium.io)\n",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "blockchain",
      "description": "Blockchain networks"
    },
    {
      "name": "call",
      "description": "Call for Papers/Abstracts"
    },
    {
      "name": "comments",
      "description": "User comments about publications"
    },
    {
      "name": "communities",
      "description": "Communities management"
    },
    {
      "name": "configuration",
      "description": "Configuration"
    },
    {
      "name": "conversations",
      "description": "Chat and conversations"
    },
    {
      "name": "deposits",
      "description": "Publications management"
    },
    {
      "name": "disciplines",
      "description": "Disciplines"
    },
    {
      "name": "domains",
      "description": "Blocked email domains"
    },
    {
      "name": "feedback",
      "description": "Feedback"
    },
    {
      "name": "institutions",
      "description": "Institutions"
    },
    {
      "name": "Invitations",
      "description": "Invitations to peer review and copy editing"
    },
    {
      "name": "ithenticate",
      "description": "IThenticate management"
    },
    {
      "name": "notifications",
      "description": "Nofitications"
    },
    {
      "name": "payment",
      "description": "Payment operations with Stripe"
    },
    {
      "name": "Push Notifications",
      "description": "Push Notifications"
    },
    {
      "name": "reviews",
      "description": "Peer reviews management"
    },
    {
      "name": "session",
      "description": "Conference sessions"
    },
    {
      "name": "templates",
      "description": "Email templating"
    },
    {
      "name": "users",
      "description": "Users management"
    },
    {
      "name": "admin",
      "description": "Platform admins management"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "AcceptedFor": {
        "type": "string",
        "description": "The submission might be accepted for poster or conference talk. Optional value.",
        "enum": [
          "presentation",
          "poster",
          "none"
        ]
      },
      "AccessRight": {
        "type": "string",
        "description": "Community custom licenses",
        "enum": [
          "cc by",
          "cc by-nd",
          "cc0"
        ]
      },
      "AddMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Content of the message in text format",
            "example": "Hello Jon, thanks for submitting your publication to our journal"
          }
        },
        "required": [
          "message"
        ]
      },
      "AppFile": {
        "type": "object",
        "properties": {
          "lastModified": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "lastModified",
          "name",
          "size",
          "type"
        ]
      },
      "AppNotificationDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notification ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "title": {
            "type": "string",
            "description": "Notification title",
            "example": "New deposit pending approval"
          },
          "body": {
            "type": "string",
            "description": "Notification content",
            "example": "Publication accepted in Orvium Community."
          },
          "icon": {
            "type": "string",
            "description": "Icon to show with the notification",
            "example": "example.png"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Mark the date where the notification was created",
            "example": "21/12/2022"
          },
          "isRead": {
            "type": "boolean",
            "description": "Check if the user have read the notification",
            "example": true
          },
          "action": {
            "type": "string",
            "description": "Notification actions",
            "example": "[Update]"
          }
        },
        "required": [
          "_id",
          "userId",
          "title",
          "body",
          "icon",
          "createdOn",
          "isRead"
        ]
      },
      "AssignEditorPayload": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string"
          }
        },
        "required": [
          "assignee"
        ]
      },
      "AssignEditorialDecisionPayload": {
        "type": "object",
        "properties": {
          "acceptedFor": {
            "$ref": "#/components/schemas/AcceptedFor"
          }
        },
        "required": [
          "acceptedFor"
        ]
      },
      "AuthorDTO": {
        "type": "object",
        "properties": {
          "credit": {
            "example": "[conceptualization]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditType"
            }
          },
          "userId": {
            "type": "string",
            "description": "Author ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "userObjectId": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "description": "Author first name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "Author last name",
            "example": "doe"
          },
          "email": {
            "type": "string",
            "description": "Author email",
            "example": "example@example.com"
          },
          "nickname": {
            "type": "string",
            "description": "Author nickname",
            "example": "john-doe"
          },
          "orcid": {
            "type": "string",
            "description": "Author orcid",
            "example": "0000-0001-5000-0007"
          },
          "gravatar": {
            "type": "string",
            "description": "Author gravatar md5 hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "institutions": {
            "description": "Institutions of the author",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "credit",
          "firstName",
          "lastName",
          "institutions"
        ]
      },
      "AuthorUpdateDTO": {
        "type": "object",
        "properties": {
          "credit": {
            "example": "[conceptualization]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditType"
            }
          },
          "firstName": {
            "type": "string",
            "description": "Author first name",
            "example": "john"
          },
          "email": {
            "type": "string",
            "description": "Author email",
            "example": "example@example.com"
          },
          "lastName": {
            "type": "string",
            "description": "Author last name",
            "example": "doe"
          },
          "nickname": {
            "type": "string",
            "description": "Author nickname",
            "example": "john-doe"
          },
          "orcid": {
            "type": "string",
            "description": "Author orcid",
            "example": "0000-0001-5000-0007"
          },
          "gravatar": {
            "type": "string",
            "description": "Author gravatar md5 hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "institutions": {
            "description": "Institutions of the author",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "credit",
          "firstName",
          "lastName",
          "institutions"
        ]
      },
      "BibtexReferences": {
        "type": "object",
        "properties": {
          "year": {
            "description": "The year of the reference\nexample: 1998",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "number": {
            "description": "The primary means of identifying a specific technical report\nexample: DOE-SLC-6903-1",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID to reference"
          },
          "type": {
            "type": "string",
            "description": "Reference type\nexample: article"
          },
          "raw": {
            "type": "string",
            "description": "The raw format of the bibtex citation\nexample: @article{knuth:1984, ..."
          },
          "title": {
            "type": "string",
            "description": "Reference title\nexample: The independence of the continuum hypothesis"
          },
          "author": {
            "type": "string",
            "description": "The names and surnames of the current reference authors\nexample: Lisa A. Urry and Michael L. Cain and Steven A. Wasserman and Peter V. Minorsky and Jane B. Reece"
          },
          "editor": {
            "type": "string",
            "description": "Names and surnames of the editors\nexample: Hawley, Teresa S. and Hawley, Robert G."
          },
          "booktitle": {
            "type": "string",
            "description": "The title of the inbook refered in the publication\nexample: Campbell Biology"
          },
          "publisher": {
            "type": "string",
            "description": "The url of the reference\nexample: https://www.example.com/"
          },
          "school": {
            "type": "string",
            "description": "The name of the university or degree awarding institution where the thesis was written\nexample: Massachusetts Institute of Technology"
          },
          "address": {
            "type": "string",
            "description": "The address of the publisher or the institution\nexample: New York, NY"
          },
          "month": {
            "type": "string",
            "description": "The month of the reference\nexample: jul"
          },
          "pages": {
            "type": "string",
            "description": "The pages of that appear the reference in an article...\nexample: 1143--1148"
          },
          "journal": {
            "type": "string",
            "description": "The name of the journal\nexample: Proceedings of the National Academy of Sciences"
          },
          "volume": {
            "type": "string",
            "description": "The volume of the article... that appear the reference\nexample: 10867"
          },
          "series": {
            "type": "string",
            "description": "The name of the series or set of books\nexample: NordiCHI"
          },
          "doi": {
            "type": "string",
            "description": "The doi of the reference\nexample: \"https://doi.org/10.0000/0000\""
          },
          "issn": {
            "type": "string",
            "description": "Eight-digit serial number used to uniquely identify a serial publication, such as a magazine\nexample: 2049-3630"
          },
          "url": {
            "type": "string",
            "description": "The url of the reference\nexample: https://www.example.com/"
          },
          "urldate": {
            "type": "string",
            "description": "The url of the reference\nexample: https://www.example.com/"
          },
          "language": {
            "type": "string",
            "description": "The language of the reference\nexample: English"
          },
          "copyright": {
            "type": "string",
            "description": "Copyright type of the reference\nexample: All rights reserved"
          },
          "note": {
            "type": "string",
            "description": "Any information that might be interesting to the reader and did not fit into any of the other fields\nexample: Accessed: 2018-12-06"
          },
          "keyword": {
            "type": "string",
            "description": "Keywords used for searching or possibly for annotation.\nexample: AI"
          },
          "abstract": {
            "type": "string",
            "description": "An abstract of the work.\nexample: An Analysis of Yukon Delta Salmon Management Rita Asgeirsson, Western Washington University"
          }
        },
        "required": [
          "id",
          "type",
          "raw",
          "title"
        ]
      },
      "BlockchainNetworkDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Blockchain codename",
            "example": "mainnet"
          },
          "displayName": {
            "type": "string",
            "description": "Blockchain display name",
            "example": "Ethereum Mainnet"
          },
          "networkId": {
            "type": "number",
            "description": "Blockchain Network ID",
            "example": 1
          },
          "appAddress": {
            "type": "string",
            "description": "SmartContract address of the application",
            "example": "0x6DBA6e75Ae8a7c342144380f0A5FbFc2Eee8D8ab"
          },
          "escrowAddress": {
            "type": "string",
            "description": "SmartContract address of the escrow",
            "example": "0xd1eBDEF716CE17Cc24A6B207b4dA49729f74202a"
          },
          "tokenAddress": {
            "type": "string",
            "description": "SmartContract address of the token",
            "example": "0x470562a0DAb25092310eC8F58503aF053A54250E"
          },
          "explorerUrl": {
            "type": "string",
            "description": "URL of the blockchain explorer.",
            "example": "https://etherscan.io/"
          }
        },
        "required": [
          "name",
          "displayName",
          "networkId",
          "appAddress",
          "escrowAddress",
          "tokenAddress",
          "explorerUrl"
        ]
      },
      "CalendarDTO": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date marked in the calendar",
            "example": "21/12/2022"
          },
          "message": {
            "type": "string",
            "description": "Description of the event",
            "example": "Start 2022 Orvium conference"
          },
          "daysLeft": {
            "type": "number",
            "description": "Days left from today to the selected day in the calendar",
            "example": 6
          }
        },
        "required": [
          "date",
          "message",
          "daysLeft"
        ]
      },
      "CalendarUpdateDTO": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date marked in the calendar",
            "example": "21/12/2022"
          },
          "message": {
            "type": "string",
            "description": "Description of the event",
            "example": "Start 2022 Orvium conference"
          }
        },
        "required": [
          "date",
          "message"
        ]
      },
      "CallCreateDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Call Title"
          },
          "community": {
            "type": "string",
            "description": "Community ID of the community where this call has been created",
            "example": "63848e5d2e63b7fa277f58b0"
          }
        },
        "required": [
          "title",
          "community"
        ]
      },
      "CallDTO": {
        "type": "object",
        "properties": {
          "callType": {
            "example": "Call for papers or call for abstracts",
            "$ref": "#/components/schemas/CallType"
          },
          "_id": {
            "type": "string",
            "description": "Call ID",
            "example": "542c2b97bac0595474108b48"
          },
          "title": {
            "type": "string",
            "description": "Call Title"
          },
          "deadline": {
            "format": "date-time",
            "type": "string",
            "description": "Call Deadline",
            "example": "21/12/2022"
          },
          "description": {
            "type": "string",
            "description": "Call Description"
          },
          "scope": {
            "type": "string",
            "description": "Area or subjects relevant to the call for papers/abstract"
          },
          "guestEditors": {
            "type": "string",
            "description": "Call Guest editors"
          },
          "disciplines": {
            "description": "Disciplines related to the topic of the call",
            "example": "Architecture, Medicine and health, Environmental psychology",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "type": "string",
            "description": "Call contact information"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for this call",
            "example": "example@example.com"
          },
          "visible": {
            "type": "boolean",
            "description": "Visibility of this call in the platform",
            "example": true,
            "default": false
          },
          "community": {
            "type": "string",
            "description": "Community ID of the community where this call has been created",
            "example": "63848e5d2e63b7fa277f58b0"
          },
          "actions": {
            "description": "Call actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "callType",
          "_id",
          "title",
          "description",
          "scope",
          "guestEditors",
          "disciplines",
          "contact",
          "contactEmail",
          "visible",
          "community",
          "actions"
        ]
      },
      "CallType": {
        "type": "string",
        "description": "Type of the call created",
        "enum": [
          "call for papers",
          "call for abstracts"
        ]
      },
      "CallUpdateDTO": {
        "type": "object",
        "properties": {
          "callType": {
            "example": "Call for papers or call for abstracts",
            "$ref": "#/components/schemas/CallType"
          },
          "title": {
            "type": "string",
            "description": "Call Title",
            "example": "My conference Enabling health, care and well-being through design research"
          },
          "deadline": {
            "format": "date-time",
            "type": "string",
            "description": "Call Deadline",
            "example": "21/12/2022"
          },
          "description": {
            "type": "string",
            "description": "Call Description",
            "example": "This call is to remember to submit the publications for the conference"
          },
          "scope": {
            "type": "string",
            "description": "Area or subjects relevant to the call for papers/abstract",
            "example": "Health care well-being architecture design research"
          },
          "guestEditors": {
            "type": "string",
            "description": "Call Guest editors",
            "example": "John Doe, Michael Kane"
          },
          "disciplines": {
            "description": "Disciplines related to the topic of the call",
            "example": "Architecture, Medicine and health, Environmental psychology",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "type": "string",
            "description": "Call contact information",
            "example": "Organizing / Scientific Committee of Orvium"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email for this call",
            "example": "example@example.com"
          },
          "visible": {
            "type": "boolean",
            "description": "Visibility of this call in the platform",
            "example": true,
            "default": false
          }
        }
      },
      "CheckoutSessionPaymentsDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDTO"
            }
          }
        },
        "required": [
          "_id",
          "payments"
        ]
      },
      "Citation": {
        "type": "object",
        "properties": {
          "apa": {
            "type": "string",
            "description": "Citation in apa format",
            "example": "(Field, 2005). For direct quotations, include the page number as well, for example: (Field, 2005, p. 14)."
          }
        },
        "required": [
          "apa"
        ]
      },
      "CitationsToBibtexBody": {
        "type": "object",
        "properties": {
          "citations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "citations"
        ]
      },
      "CommentDTO": {
        "type": "object",
        "properties": {
          "tags": {
            "example": "[author, moderator]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentTags"
            }
          },
          "_id": {
            "type": "string",
            "description": "Comment ID",
            "example": "542c2b97bac0595474108b48"
          },
          "user_id": {
            "type": "string",
            "description": "Comment author user ID",
            "example": "6203d0923fec3d1531fca950"
          },
          "community": {
            "type": "string",
            "description": "Comment community ID",
            "example": "6203d0923fec3d1531fca950"
          },
          "user": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "resource": {
            "type": "string",
            "description": "Place where the comment was created",
            "example": "DepositDocument"
          },
          "content": {
            "type": "string",
            "description": "Message of the comment"
          },
          "parent": {
            "type": "string",
            "description": "Comment id of the previous comment of the conversation",
            "example": "[author, moderator]"
          },
          "hasReplies": {
            "type": "boolean",
            "description": "Mark if the comment has any reply",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Comment creation date",
            "example": "21/12/2022"
          },
          "actions": {
            "description": "Comment actions",
            "example": [],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tags",
          "_id",
          "user_id",
          "community",
          "user",
          "resource",
          "content",
          "hasReplies",
          "createdAt",
          "actions"
        ]
      },
      "CommentTags": {
        "type": "string",
        "description": "Tags of the author of the comment",
        "enum": [
          "author",
          "reviewer",
          "admin",
          "moderator"
        ]
      },
      "CommunityCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Community name",
            "example": "Orvium Community"
          },
          "codename": {
            "type": "string",
            "description": "Community codename",
            "example": "orvium"
          }
        },
        "required": [
          "name",
          "codename"
        ]
      },
      "CommunityDTO": {
        "type": "object",
        "properties": {
          "status": {
            "example": "published",
            "$ref": "#/components/schemas/CommunityStatus"
          },
          "type": {
            "example": "community",
            "$ref": "#/components/schemas/CommunityType"
          },
          "subscription": {
            "example": "free",
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "customLicenses": {
            "example": "[cc0]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRight"
            }
          },
          "preferredFileExtensions": {
            "example": "[pdf]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileExtensions"
            }
          },
          "_id": {
            "type": "string",
            "description": "Community ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "name": {
            "type": "string",
            "description": "Community name",
            "example": "Orvium Community"
          },
          "description": {
            "type": "string",
            "description": "Community description",
            "example": "Orvium Community is a multidisciplinary, open access and open peer review community for researchers. Join now and publish your research!"
          },
          "creator": {
            "type": "string",
            "description": "Community creator ID",
            "example": "5ea719e04c7bdc7dad15673e"
          },
          "country": {
            "type": "string",
            "description": "the country of the community",
            "example": "Vitoria-Gasteiz, Spain"
          },
          "codename": {
            "type": "string",
            "description": "Community codename",
            "example": "orvium"
          },
          "acknowledgement": {
            "type": "string",
            "description": "Community acknowledgement",
            "example": "<ol><li>The work has not been previously published, nor been submitted to another publisher.</li></ol>"
          },
          "twitterURL": {
            "type": "string",
            "description": "The twitter URL of the community",
            "example": "https://twitter.com/orvium"
          },
          "facebookURL": {
            "type": "string",
            "description": "the facebook URL of the community",
            "example": "https://www.facebook.com/orvium"
          },
          "websiteURL": {
            "type": "string",
            "description": "the website URL of the community",
            "example": "https://orvium.io/"
          },
          "logoURL": {
            "type": "string",
            "description": "the logo URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/logo.jpg"
          },
          "bannerURL": {
            "type": "string",
            "description": "the banner URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/banner1.jpg"
          },
          "cardImageUrl": {
            "type": "string",
            "description": "the card image URL of the community",
            "example": "https://i.postimg.cc/8cG0jsrQ/image.png"
          },
          "guidelinesURL": {
            "type": "string",
            "description": "the guideline URL of the community",
            "example": "https://orvium.io/"
          },
          "actions": {
            "description": "Community actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conferenceProceedings": {
            "description": "Conferences ID associated with this community",
            "example": [
              "613ef9d5c8b4c84c09c292bf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newTracks": {
            "description": "New community tracks",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "privateReviews": {
            "type": "boolean",
            "description": "Community have privates reviewers",
            "example": false
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Community option to give permission to authors to invite reviewers",
            "example": false
          },
          "issn": {
            "type": "string",
            "description": "Community issn",
            "example": "2667-2812"
          },
          "calendarDates": {
            "description": "Community calendar dates",
            "example": "{date: 2022-03-14T23:00:00.000+00:00, message: Submission of concept version of papers, daysLeft: null}",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDTO"
            }
          },
          "calendarVisible": {
            "type": "boolean",
            "description": "Community calendar visible",
            "example": false
          },
          "followersCount": {
            "type": "number",
            "description": "Community follower counts",
            "example": 74
          },
          "productsVisible": {
            "type": "boolean",
            "description": "Community products visible",
            "example": true
          },
          "views": {
            "type": "number",
            "description": "Community views",
            "example": 74
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          }
        },
        "required": [
          "status",
          "type",
          "subscription",
          "customLicenses",
          "_id",
          "name",
          "creator",
          "codename",
          "actions",
          "conferenceProceedings",
          "newTracks",
          "privateReviews",
          "canAuthorInviteReviewers",
          "calendarDates",
          "calendarVisible",
          "followersCount",
          "productsVisible",
          "views",
          "showIdentityToAuthor",
          "showIdentityToEveryone",
          "showReviewToAuthor",
          "showReviewToEveryone"
        ]
      },
      "CommunityModeratorDTO": {
        "type": "object",
        "properties": {
          "moderatorRole": {
            "example": "owner",
            "$ref": "#/components/schemas/ModeratorRole"
          },
          "_id": {
            "type": "string",
            "description": "Community Moderator ID",
            "example": "613f801b654745000888e283"
          },
          "user": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "notificationOptions": {
            "$ref": "#/components/schemas/NotificationOptions"
          },
          "actions": {
            "description": "Community Moderator actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "moderatorRole",
          "_id",
          "user"
        ]
      },
      "CommunityPopulatedDTO": {
        "type": "object",
        "properties": {
          "status": {
            "example": "published",
            "$ref": "#/components/schemas/CommunityStatus"
          },
          "type": {
            "example": "community",
            "$ref": "#/components/schemas/CommunityType"
          },
          "subscription": {
            "example": "free",
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "customLicenses": {
            "example": "[cc0]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRight"
            }
          },
          "preferredFileExtensions": {
            "example": "[pdf]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileExtensions"
            }
          },
          "conferenceProceedingsPopulated": {
            "description": "List of conferences associated with this community",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityDTO"
            }
          },
          "moderatorsPopulated": {
            "description": "List of moderators of the community",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorDTO"
            }
          },
          "_id": {
            "type": "string",
            "description": "Community ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "name": {
            "type": "string",
            "description": "Community name",
            "example": "Orvium Community"
          },
          "description": {
            "type": "string",
            "description": "Community description",
            "example": "Orvium Community is a multidisciplinary, open access and open peer review community for researchers. Join now and publish your research!"
          },
          "creator": {
            "type": "string",
            "description": "Community creator ID",
            "example": "5ea719e04c7bdc7dad15673e"
          },
          "country": {
            "type": "string",
            "description": "the country of the community",
            "example": "Vitoria-Gasteiz, Spain"
          },
          "codename": {
            "type": "string",
            "description": "Community codename",
            "example": "orvium"
          },
          "acknowledgement": {
            "type": "string",
            "description": "Community acknowledgement",
            "example": "<ol><li>The work has not been previously published, nor been submitted to another publisher.</li></ol>"
          },
          "twitterURL": {
            "type": "string",
            "description": "The twitter URL of the community",
            "example": "https://twitter.com/orvium"
          },
          "facebookURL": {
            "type": "string",
            "description": "the facebook URL of the community",
            "example": "https://www.facebook.com/orvium"
          },
          "websiteURL": {
            "type": "string",
            "description": "the website URL of the community",
            "example": "https://orvium.io/"
          },
          "logoURL": {
            "type": "string",
            "description": "the logo URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/logo.jpg"
          },
          "bannerURL": {
            "type": "string",
            "description": "the banner URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/banner1.jpg"
          },
          "cardImageUrl": {
            "type": "string",
            "description": "the card image URL of the community",
            "example": "https://i.postimg.cc/8cG0jsrQ/image.png"
          },
          "guidelinesURL": {
            "type": "string",
            "description": "the guideline URL of the community",
            "example": "https://orvium.io/"
          },
          "actions": {
            "description": "Community actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conferenceProceedings": {
            "description": "Conferences ID associated with this community",
            "example": [
              "613ef9d5c8b4c84c09c292bf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newTracks": {
            "description": "New community tracks",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "privateReviews": {
            "type": "boolean",
            "description": "Community have privates reviewers",
            "example": false
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Community option to give permission to authors to invite reviewers",
            "example": false
          },
          "issn": {
            "type": "string",
            "description": "Community issn",
            "example": "2667-2812"
          },
          "calendarDates": {
            "description": "Community calendar dates",
            "example": "{date: 2022-03-14T23:00:00.000+00:00, message: Submission of concept version of papers, daysLeft: null}",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDTO"
            }
          },
          "calendarVisible": {
            "type": "boolean",
            "description": "Community calendar visible",
            "example": false
          },
          "followersCount": {
            "type": "number",
            "description": "Community follower counts",
            "example": 74
          },
          "productsVisible": {
            "type": "boolean",
            "description": "Community products visible",
            "example": true
          },
          "views": {
            "type": "number",
            "description": "Community views",
            "example": 74
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          }
        },
        "required": [
          "status",
          "type",
          "subscription",
          "customLicenses",
          "conferenceProceedingsPopulated",
          "moderatorsPopulated",
          "_id",
          "name",
          "creator",
          "codename",
          "actions",
          "conferenceProceedings",
          "newTracks",
          "privateReviews",
          "canAuthorInviteReviewers",
          "calendarDates",
          "calendarVisible",
          "followersCount",
          "productsVisible",
          "views",
          "showIdentityToAuthor",
          "showIdentityToEveryone",
          "showReviewToAuthor",
          "showReviewToEveryone"
        ]
      },
      "CommunityPrivateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "example": "published",
            "$ref": "#/components/schemas/CommunityStatus"
          },
          "type": {
            "example": "community",
            "$ref": "#/components/schemas/CommunityType"
          },
          "subscription": {
            "example": "free",
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "customLicenses": {
            "example": "[cc0]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRight"
            }
          },
          "preferredFileExtensions": {
            "example": "[pdf]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileExtensions"
            }
          },
          "conferenceProceedingsPopulated": {
            "description": "List of conferences associated with this community",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityDTO"
            }
          },
          "moderatorsPopulated": {
            "description": "List of moderators of the community",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityModeratorDTO"
            }
          },
          "_id": {
            "type": "string",
            "description": "Community ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "name": {
            "type": "string",
            "description": "Community name",
            "example": "Orvium Community"
          },
          "description": {
            "type": "string",
            "description": "Community description",
            "example": "Orvium Community is a multidisciplinary, open access and open peer review community for researchers. Join now and publish your research!"
          },
          "creator": {
            "type": "string",
            "description": "Community creator ID",
            "example": "5ea719e04c7bdc7dad15673e"
          },
          "country": {
            "type": "string",
            "description": "the country of the community",
            "example": "Vitoria-Gasteiz, Spain"
          },
          "codename": {
            "type": "string",
            "description": "Community codename",
            "example": "orvium"
          },
          "acknowledgement": {
            "type": "string",
            "description": "Community acknowledgement",
            "example": "<ol><li>The work has not been previously published, nor been submitted to another publisher.</li></ol>"
          },
          "twitterURL": {
            "type": "string",
            "description": "The twitter URL of the community",
            "example": "https://twitter.com/orvium"
          },
          "facebookURL": {
            "type": "string",
            "description": "the facebook URL of the community",
            "example": "https://www.facebook.com/orvium"
          },
          "websiteURL": {
            "type": "string",
            "description": "the website URL of the community",
            "example": "https://orvium.io/"
          },
          "logoURL": {
            "type": "string",
            "description": "the logo URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/logo.jpg"
          },
          "bannerURL": {
            "type": "string",
            "description": "the banner URL of the community",
            "example": "https://assets.orvium.io/OrviumCommunity/banner1.jpg"
          },
          "cardImageUrl": {
            "type": "string",
            "description": "the card image URL of the community",
            "example": "https://i.postimg.cc/8cG0jsrQ/image.png"
          },
          "guidelinesURL": {
            "type": "string",
            "description": "the guideline URL of the community",
            "example": "https://orvium.io/"
          },
          "actions": {
            "description": "Community actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conferenceProceedings": {
            "description": "Conferences ID associated with this community",
            "example": [
              "613ef9d5c8b4c84c09c292bf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newTracks": {
            "description": "New community tracks",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "privateReviews": {
            "type": "boolean",
            "description": "Community have privates reviewers",
            "example": false
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Community option to give permission to authors to invite reviewers",
            "example": false
          },
          "issn": {
            "type": "string",
            "description": "Community issn",
            "example": "2667-2812"
          },
          "calendarDates": {
            "description": "Community calendar dates",
            "example": "{date: 2022-03-14T23:00:00.000+00:00, message: Submission of concept version of papers, daysLeft: null}",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDTO"
            }
          },
          "calendarVisible": {
            "type": "boolean",
            "description": "Community calendar visible",
            "example": false
          },
          "followersCount": {
            "type": "number",
            "description": "Community follower counts",
            "example": 74
          },
          "productsVisible": {
            "type": "boolean",
            "description": "Community products visible",
            "example": true
          },
          "views": {
            "type": "number",
            "description": "Community views",
            "example": 74
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          },
          "isPrivateDTO": {
            "type": "boolean",
            "default": true
          },
          "stripeAccount": {
            "$ref": "#/components/schemas/StripeDTO"
          },
          "iThenticateEULANeeded": {
            "type": "boolean",
            "description": "Community iThenticateEULAN needed",
            "example": true
          },
          "crossref": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossrefDTO"
              }
            ]
          },
          "datacite": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DataCiteDTO"
              }
            ]
          }
        },
        "required": [
          "status",
          "type",
          "subscription",
          "customLicenses",
          "conferenceProceedingsPopulated",
          "moderatorsPopulated",
          "_id",
          "name",
          "creator",
          "codename",
          "actions",
          "conferenceProceedings",
          "newTracks",
          "privateReviews",
          "canAuthorInviteReviewers",
          "calendarDates",
          "calendarVisible",
          "followersCount",
          "productsVisible",
          "views",
          "showIdentityToAuthor",
          "showIdentityToEveryone",
          "showReviewToAuthor",
          "showReviewToEveryone",
          "isPrivateDTO"
        ]
      },
      "CommunityStatus": {
        "type": "string",
        "description": "Community status",
        "enum": [
          "draft",
          "pending approval",
          "published"
        ]
      },
      "CommunityType": {
        "type": "string",
        "description": "Community type",
        "enum": [
          "community",
          "journal",
          "conference"
        ]
      },
      "CommunityUpdateDto": {
        "type": "object",
        "properties": {
          "type": {
            "example": "community",
            "$ref": "#/components/schemas/CommunityType"
          },
          "customLicenses": {
            "example": "[cc0]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRight"
            }
          },
          "preferredFileExtensions": {
            "example": "[pdf]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileExtensions"
            }
          },
          "name": {
            "type": "string",
            "description": "Community name",
            "example": "Orvium Community"
          },
          "description": {
            "type": "string",
            "description": "Community description",
            "example": "Orvium Community is a multidisciplinary, open access and open peer review community for researchers. Join now and publish your research!"
          },
          "country": {
            "type": "string",
            "description": "the country of the community",
            "example": "Vitoria-Gasteiz, Spain"
          },
          "acknowledgement": {
            "type": "string",
            "description": "Community acknowledgement",
            "example": "<ol><li>The work has not been previously published, nor been submitted to another publisher.</li></ol>"
          },
          "twitterURL": {
            "type": "string",
            "description": "the twitter URL of the community",
            "example": "https://twitter.com/orvium"
          },
          "facebookURL": {
            "type": "string",
            "description": "the facebook URL of the community",
            "example": "https://www.facebook.com/orvium"
          },
          "websiteURL": {
            "type": "string",
            "description": "the website URL of the community",
            "example": "https://orvium.io/"
          },
          "guidelinesURL": {
            "type": "string",
            "description": "the guideline URL of the community",
            "example": "https://orvium.io/"
          },
          "iThenticateAPIKey": {
            "type": "string",
            "description": "Community iThenticateAPI key",
            "example": "617298619ff9664a706ca6fb"
          },
          "iThenticateEULAVersion": {
            "type": "string",
            "description": "Community iThenticateAPI version",
            "example": "1"
          },
          "issn": {
            "type": "string",
            "description": "Community issn",
            "example": "2667-2812"
          },
          "calendarDates": {
            "description": "Community calendar dates",
            "example": "{date: 2022-03-14T23:00:00.000+00:00, message: Submission of concept version of papers}",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarUpdateDTO"
            }
          },
          "calendarVisible": {
            "type": "boolean",
            "description": "Community calendar visible",
            "example": false
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Community option to give permission to authors to invite reviewers",
            "example": false
          },
          "productsVisible": {
            "type": "boolean",
            "description": "Community products visible",
            "example": true
          },
          "crossref": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossrefDTO"
              }
            ]
          },
          "datacite": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DataCiteDTO"
              }
            ]
          },
          "newTracks": {
            "description": "New community tracks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          },
          "privateReviews": {
            "type": "boolean",
            "description": "Community option so that only invited users can create a review",
            "example": true
          }
        }
      },
      "CommunityUploadConfirmation": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string"
          },
          "fileMetadata": {
            "$ref": "#/components/schemas/FileMetadata"
          }
        },
        "required": [
          "imageType",
          "fileMetadata"
        ]
      },
      "ConversationPopulatedDTO": {
        "type": "object",
        "properties": {
          "participantsPopulated": {
            "description": "An array of the all information of the conversations participants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSummaryDTO"
            }
          },
          "_id": {
            "type": "string",
            "description": "Conversation ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "participants": {
            "description": "An array of the IDs of the conversations participants",
            "example": "5fa1908fd29a17dc961cc435",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "messagesPending": {
            "type": "boolean",
            "description": "Mark if the last conversation message is pending to read",
            "example": false
          },
          "lastMessageDate": {
            "format": "date-time",
            "type": "string",
            "description": "Last message date",
            "example": "2012-01-01"
          },
          "messages": {
            "description": "An array of the messages of the conversation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDTO"
            }
          },
          "actions": {
            "description": "An array of the conversation actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "participantsPopulated",
          "_id",
          "participants",
          "messagesPending",
          "messages"
        ]
      },
      "CreateCommentDTO": {
        "type": "object",
        "properties": {
          "resourceModel": {
            "type": "string",
            "description": "Place where the comment was created",
            "example": "Deposit",
            "enum": [
              "Deposit",
              "Review"
            ]
          },
          "content": {
            "type": "string",
            "description": "Message of the comment"
          },
          "resource": {
            "type": "string"
          },
          "parent": {
            "type": "string",
            "description": "Comment id of the previous comment of the conversation",
            "example": "[author, moderator]"
          }
        },
        "required": [
          "resourceModel",
          "content",
          "resource"
        ]
      },
      "CreateConversationDTO": {
        "type": "object",
        "properties": {
          "recipient": {
            "type": "string",
            "description": "User ID of the person that receive the notification",
            "example": "5fa1908fd29a17dc961cc435"
          }
        },
        "required": [
          "recipient"
        ]
      },
      "CreateDepositDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Publication title",
            "example": "My first publication"
          },
          "community": {
            "type": "string",
            "description": "Community id where the publication is created",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "doi": {
            "type": "string",
            "description": "DOI of the publication",
            "example": "\"\"https://doi.org/10.0000/0000\""
          }
        },
        "required": [
          "title",
          "community"
        ]
      },
      "CreateDepositWithDoiDTO": {
        "type": "object",
        "properties": {
          "community": {
            "type": "string",
            "description": "Community where the publication is created",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "doi": {
            "type": "string",
            "description": "DOI of the publication",
            "example": "https://doi.org/10.0000/0000"
          }
        },
        "required": [
          "community",
          "doi"
        ]
      },
      "CreateFileDTO": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/AppFile"
          }
        },
        "required": [
          "file"
        ]
      },
      "CreateImageDTO": {
        "type": "object",
        "properties": {
          "communityImage": {
            "example": "logo",
            "$ref": "#/components/schemas/ImageType"
          },
          "file": {
            "$ref": "#/components/schemas/AppFile"
          }
        },
        "required": [
          "communityImage",
          "file"
        ]
      },
      "CreateInstitutionDTO": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Institution domain",
            "example": "orvium"
          },
          "name": {
            "type": "string",
            "description": "Institution name",
            "example": "Orvium"
          },
          "country": {
            "type": "string",
            "description": "Institution country",
            "example": "Spain"
          },
          "city": {
            "type": "string",
            "description": "Institution city",
            "example": "Vitoria"
          },
          "synonym": {
            "type": "string",
            "description": "Another way of calling the institution",
            "example": "Orvium Labs"
          }
        },
        "required": [
          "domain",
          "name"
        ]
      },
      "CreateInviteDTO": {
        "type": "object",
        "properties": {
          "inviteType": {
            "example": "review",
            "$ref": "#/components/schemas/InviteType"
          },
          "addressee": {
            "type": "string",
            "description": "Invitation addressee",
            "example": "john@example.com"
          },
          "data": {
            "$ref": "#/components/schemas/CreateInviteData"
          }
        },
        "required": [
          "inviteType",
          "addressee",
          "data"
        ]
      },
      "CreateInviteData": {
        "type": "object",
        "properties": {
          "depositId": {
            "type": "string"
          },
          "reviewerName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "dateLimit": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "depositId",
          "reviewerName",
          "message"
        ]
      },
      "CreatePlatformImageDTO": {
        "type": "object",
        "properties": {
          "platformImage": {
            "example": "banner",
            "$ref": "#/components/schemas/PlatformImageType"
          },
          "file": {
            "$ref": "#/components/schemas/AppFile"
          }
        },
        "required": [
          "platformImage",
          "file"
        ]
      },
      "CreateProfileImageDTO": {
        "type": "object",
        "properties": {
          "profileImage": {
            "example": "banner",
            "$ref": "#/components/schemas/ProfileImageType"
          },
          "file": {
            "$ref": "#/components/schemas/AppFile"
          }
        },
        "required": [
          "profileImage",
          "file"
        ]
      },
      "CreateReviewDTO": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "string",
            "description": "the ID of deposit when you create a review",
            "example": "5ca50abe835e09000186f88e"
          },
          "invite": {
            "type": "string",
            "description": "pass invitation ID when you create a review",
            "example": "62ff56abbde4de30b2bb1286"
          }
        },
        "required": [
          "deposit"
        ]
      },
      "CreditType": {
        "type": "string",
        "description": "Author credit in the publicatuon",
        "enum": [
          "methodology",
          "conceptualization",
          "software",
          "validation",
          "formal analysis",
          "investigation",
          "resources",
          "data curation",
          "writing original draft",
          "writing review and editing",
          "visualization",
          "supervision",
          "project administration",
          "funding acquisition"
        ]
      },
      "CrossrefDTO": {
        "type": "object",
        "properties": {
          "prefixDOI": {
            "type": "string",
            "description": "Prefix of the DOI",
            "example": "10.55835"
          },
          "user": {
            "type": "string",
            "description": "User id",
            "example": "63848e5d2e63b7fa277f58b0"
          },
          "pass": {
            "type": "string",
            "description": "Crossref password",
            "example": "my_password_example"
          },
          "role": {
            "type": "string",
            "description": "Crossref role",
            "example": "orvi"
          },
          "server": {
            "type": "string",
            "description": "Crossref server",
            "example": "https://doi.crossref.org/servlet/deposit",
            "enum": [
              "https://test.crossref.org/servlet/deposit",
              "https://doi.crossref.org/servlet/deposit"
            ]
          }
        },
        "required": [
          "prefixDOI",
          "user",
          "pass",
          "role",
          "server"
        ]
      },
      "DataCiteDTO": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "description": "Prefix of the DOI",
            "example": "10.55835"
          },
          "accountId": {
            "type": "string",
            "description": "Account id",
            "example": "63848e5d2e63b7fa277f58b0"
          },
          "pass": {
            "type": "string",
            "description": "DataCite password",
            "example": "my_password_example"
          },
          "server": {
            "type": "string",
            "description": "DataCite server",
            "example": "https://doi.crossref.org/servlet/deposit",
            "enum": [
              "https://api.test.datacite.org",
              "https://api.datacite.org"
            ]
          }
        },
        "required": [
          "prefix",
          "accountId",
          "pass",
          "server"
        ]
      },
      "DepositDTO": {
        "type": "object",
        "properties": {
          "publicationType": {
            "example": "Research article",
            "$ref": "#/components/schemas/PublicationType"
          },
          "accessRight": {
            "$ref": "#/components/schemas/AccessRight"
          },
          "status": {
            "$ref": "#/components/schemas/DepositStatus"
          },
          "reviewType": {
            "$ref": "#/components/schemas/ReviewType"
          },
          "acceptedFor": {
            "$ref": "#/components/schemas/AcceptedFor"
          },
          "transactions": {
            "type": "object",
            "description": "List of blockchain transaction associated with this publication",
            "additionalProperties": true
          },
          "doiStatus": {
            "example": "Published",
            "$ref": "#/components/schemas/DoiStatus"
          },
          "_id": {
            "type": "string",
            "description": "Publication ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "creator": {
            "type": "string",
            "description": "Publication creator ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "assignee": {
            "type": "string",
            "description": "Editor ID assigned to the publication",
            "example": "617298619ff9664a706ca6fb"
          },
          "nickname": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Publication title",
            "example": "My first publication"
          },
          "abstract": {
            "type": "string",
            "description": "Publication abstract",
            "example": "This is a publication about the galaxy"
          },
          "submissionDate": {
            "type": "string",
            "description": "Submission date",
            "example": "21/10/2023"
          },
          "publicationDate": {
            "type": "string",
            "description": "Publication date",
            "example": "21/10/2023"
          },
          "peerReviews": {
            "description": "List of peer reviews ID associated with this publication",
            "example": [
              "617298619ff9664a706ca6fb"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authors": {
            "description": "List of authors of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorDTO"
            }
          },
          "publicationFile": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "files": {
            "description": "List of optional extra publication files metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          },
          "extraMetadata": {
            "description": "Extra information required by journals and conferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraMetadata"
              }
            ]
          },
          "gravatar": {
            "type": "string",
            "description": "Submitter gravatar",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "keywords": {
            "description": "List of keywords for the publication",
            "example": [
              "Medical"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keccak256": {
            "type": "string",
            "description": "Keccak256 hash of the main publication file.\nKeccak256 is a cryptographic function built into solidity. Can be used for cryptographic signature with a small size."
          },
          "doi": {
            "type": "string",
            "description": "DOI of the publication",
            "example": "https://doi.org/10.0000/0000"
          },
          "url": {
            "type": "string",
            "description": "The url of the publication in the platform",
            "example": "https://dapp.orvium.io/deposits/63a09f6ce3d5ff0813586171/view"
          },
          "pdfUrl": {
            "type": "string",
            "description": "The url for the pdf of the publication. This pdf might have been automatically generated.",
            "example": "https://dapp.orvium.io/api/v1/deposits/63a09f6ce3d5ff0813586171/pdf"
          },
          "disciplines": {
            "description": "List of disciplines associated to the publication",
            "example": [
              "urban-rural"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "description": "List of references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "bibtexReferences": {
            "description": "List of bibtex references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BibtexReferences"
            }
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the creation of the publication"
          },
          "version": {
            "type": "number",
            "description": "Version number of the publication",
            "example": 2
          },
          "community": {
            "type": "string",
            "description": "Community ID where the publication have been submitted",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "html": {
            "type": "string",
            "description": "Html extracted automatically for the main publication file",
            "example": "<p>This publication is about...</p>"
          },
          "images": {
            "description": "List of images extracted automatically for the main publication file",
            "example": [
              "image1.png",
              "image2.png"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "canBeReviewed": {
            "type": "boolean",
            "description": "This flag enables the creation of peer reviews for this publication",
            "example": "true"
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Deposit option to give permission to author to invite reviewers",
            "example": false
          },
          "gitRepository": {
            "type": "string",
            "description": "The url of the associated git repository",
            "example": "https://github.com/orvium/zenodo"
          },
          "actions": {
            "description": "List of actions available",
            "example": [
              "update"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "openAireIdentifier": {
            "type": "string",
            "description": "The ID of this publication in the openAire platform",
            "example": "doi_dedup___::71a1f023e1981fc47ae76982e646722d"
          },
          "views": {
            "type": "number",
            "description": "The number of views of the publication",
            "example": 1555
          },
          "isLatestVersion": {
            "type": "boolean",
            "description": "A flag that check if you're viewing in the last version of the publication"
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track timestamp of the publication",
            "example": 15437645678
          },
          "history": {
            "description": "List of the actions made in the publication",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryLogLine"
            }
          },
          "iThenticate": {
            "$ref": "#/components/schemas/iThenticate"
          }
        },
        "required": [
          "publicationType",
          "accessRight",
          "status",
          "reviewType",
          "acceptedFor",
          "_id",
          "creator",
          "nickname",
          "title",
          "abstract",
          "peerReviews",
          "authors",
          "files",
          "extraMetadata",
          "keywords",
          "disciplines",
          "references",
          "bibtexReferences",
          "version",
          "community",
          "images",
          "canBeReviewed",
          "canAuthorInviteReviewers",
          "actions",
          "views",
          "isLatestVersion",
          "history"
        ]
      },
      "DepositPopulatedDTO": {
        "type": "object",
        "properties": {
          "publicationType": {
            "example": "Research article",
            "$ref": "#/components/schemas/PublicationType"
          },
          "accessRight": {
            "$ref": "#/components/schemas/AccessRight"
          },
          "status": {
            "$ref": "#/components/schemas/DepositStatus"
          },
          "reviewType": {
            "$ref": "#/components/schemas/ReviewType"
          },
          "acceptedFor": {
            "$ref": "#/components/schemas/AcceptedFor"
          },
          "transactions": {
            "type": "object",
            "description": "List of blockchain transaction associated with this publication",
            "additionalProperties": true
          },
          "doiStatus": {
            "example": "Published",
            "$ref": "#/components/schemas/DoiStatus"
          },
          "ownerProfile": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "peerReviewsPopulated": {
            "description": "List of peer reviews objects associated with this publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewSummaryDTO"
            }
          },
          "communityPopulated": {
            "$ref": "#/components/schemas/CommunityDTO"
          },
          "socialComments": {
            "type": "number",
            "description": "Number of comments associated with this publication"
          },
          "_id": {
            "type": "string",
            "description": "Publication ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "creator": {
            "type": "string",
            "description": "Publication creator ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "assignee": {
            "type": "string",
            "description": "Editor ID assigned to the publication",
            "example": "617298619ff9664a706ca6fb"
          },
          "nickname": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Publication title",
            "example": "My first publication"
          },
          "abstract": {
            "type": "string",
            "description": "Publication abstract",
            "example": "This is a publication about the galaxy"
          },
          "submissionDate": {
            "type": "string",
            "description": "Submission date",
            "example": "21/10/2023"
          },
          "publicationDate": {
            "type": "string",
            "description": "Publication date",
            "example": "21/10/2023"
          },
          "peerReviews": {
            "description": "List of peer reviews ID associated with this publication",
            "example": [
              "617298619ff9664a706ca6fb"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authors": {
            "description": "List of authors of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorDTO"
            }
          },
          "publicationFile": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "files": {
            "description": "List of optional extra publication files metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          },
          "extraMetadata": {
            "description": "Extra information required by journals and conferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraMetadata"
              }
            ]
          },
          "gravatar": {
            "type": "string",
            "description": "Submitter gravatar",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "keywords": {
            "description": "List of keywords for the publication",
            "example": [
              "Medical"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keccak256": {
            "type": "string",
            "description": "Keccak256 hash of the main publication file.\nKeccak256 is a cryptographic function built into solidity. Can be used for cryptographic signature with a small size."
          },
          "doi": {
            "type": "string",
            "description": "DOI of the publication",
            "example": "https://doi.org/10.0000/0000"
          },
          "url": {
            "type": "string",
            "description": "The url of the publication in the platform",
            "example": "https://dapp.orvium.io/deposits/63a09f6ce3d5ff0813586171/view"
          },
          "pdfUrl": {
            "type": "string",
            "description": "The url for the pdf of the publication. This pdf might have been automatically generated.",
            "example": "https://dapp.orvium.io/api/v1/deposits/63a09f6ce3d5ff0813586171/pdf"
          },
          "disciplines": {
            "description": "List of disciplines associated to the publication",
            "example": [
              "urban-rural"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "description": "List of references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "bibtexReferences": {
            "description": "List of bibtex references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BibtexReferences"
            }
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the creation of the publication"
          },
          "version": {
            "type": "number",
            "description": "Version number of the publication",
            "example": 2
          },
          "community": {
            "type": "string",
            "description": "Community ID where the publication have been submitted",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "html": {
            "type": "string",
            "description": "Html extracted automatically for the main publication file",
            "example": "<p>This publication is about...</p>"
          },
          "images": {
            "description": "List of images extracted automatically for the main publication file",
            "example": [
              "image1.png",
              "image2.png"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "canBeReviewed": {
            "type": "boolean",
            "description": "This flag enables the creation of peer reviews for this publication",
            "example": "true"
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Deposit option to give permission to author to invite reviewers",
            "example": false
          },
          "gitRepository": {
            "type": "string",
            "description": "The url of the associated git repository",
            "example": "https://github.com/orvium/zenodo"
          },
          "actions": {
            "description": "List of actions available",
            "example": [
              "update"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "openAireIdentifier": {
            "type": "string",
            "description": "The ID of this publication in the openAire platform",
            "example": "doi_dedup___::71a1f023e1981fc47ae76982e646722d"
          },
          "views": {
            "type": "number",
            "description": "The number of views of the publication",
            "example": 1555
          },
          "isLatestVersion": {
            "type": "boolean",
            "description": "A flag that check if you're viewing in the last version of the publication"
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track timestamp of the publication",
            "example": 15437645678
          },
          "history": {
            "description": "List of the actions made in the publication",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryLogLine"
            }
          },
          "iThenticate": {
            "$ref": "#/components/schemas/iThenticate"
          }
        },
        "required": [
          "publicationType",
          "accessRight",
          "status",
          "reviewType",
          "acceptedFor",
          "ownerProfile",
          "peerReviewsPopulated",
          "communityPopulated",
          "socialComments",
          "_id",
          "creator",
          "nickname",
          "title",
          "abstract",
          "peerReviews",
          "authors",
          "files",
          "extraMetadata",
          "keywords",
          "disciplines",
          "references",
          "bibtexReferences",
          "version",
          "community",
          "images",
          "canBeReviewed",
          "canAuthorInviteReviewers",
          "actions",
          "views",
          "isLatestVersion",
          "history"
        ]
      },
      "DepositStatus": {
        "type": "string",
        "description": "Publication status",
        "enum": [
          "draft",
          "pending approval",
          "published",
          "preprint",
          "rejected",
          "merged"
        ]
      },
      "DepositsQueryDTO": {
        "type": "object",
        "properties": {
          "deposits": {
            "description": "An array of publications received by the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositPopulatedDTO"
            }
          },
          "count": {
            "type": "number",
            "description": "Number of publications received by the query",
            "example": 2
          },
          "actions": {
            "description": "An array of actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "deposits",
          "count"
        ]
      },
      "DisciplineDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Discipline name",
            "example": "Architecture"
          },
          "description": {
            "type": "string",
            "description": "Discipline description",
            "example": "Architecture"
          }
        },
        "required": [
          "name"
        ]
      },
      "DoiLogDTO": {
        "type": "object",
        "properties": {
          "doi": {
            "type": "string",
            "description": "Doi",
            "example": "10.55835/5fa1908fd29a17dc961cc435 @Expose()"
          },
          "status": {
            "type": "string",
            "description": "Status of the doi",
            "example": "published",
            "enum": [
              "processing",
              "published",
              "failed"
            ]
          },
          "data": {
            "type": "string",
            "description": "Data related to the submission of the doi, can be an error or success message",
            "example": "published"
          }
        },
        "required": [
          "doi",
          "status"
        ]
      },
      "DoiStatus": {
        "type": "string",
        "description": "Status of the DOI",
        "enum": [
          "processing",
          "published",
          "failed"
        ]
      },
      "EmailUsersDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "User lastname",
            "example": "doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "example@example.com"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar",
            "example": "image"
          },
          "gravatar": {
            "type": "string",
            "description": "User gravatar",
            "example": ""
          },
          "actions": {
            "description": "An array of actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "gravatar"
        ]
      },
      "EulaAcceptListItemClass": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "accepted_timestamp": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "accepted_timestamp",
          "language",
          "version"
        ]
      },
      "EulaVersionClass": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "valid_from": {
            "type": "string"
          },
          "valid_until": {
            "type": "object"
          },
          "url": {
            "type": "string"
          },
          "available_languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "version",
          "valid_from",
          "valid_until",
          "url",
          "available_languages"
        ]
      },
      "ExtraMetadata": {
        "type": "object",
        "properties": {
          "conferenceTitle": {
            "type": "string",
            "nullable": true,
            "description": "Conference title",
            "example": "Arch 22"
          },
          "conferenceTheme": {
            "type": "string",
            "nullable": true,
            "description": "The theme is the slogan or special emphasis of a conference in a particular year.\nIt differs from the subject of a conference in that the subject is stable over the years while the theme may vary\nfrom year to year. For example, the American Society for Information Science and Technology conference theme was\n\"Knowledge: Creation, Organization and Use\" in 1999 and \"Defining Information Architecture\" in 2000.",
            "example": "Contributing to more responsible, sustainable and transparent methods to assess academic work"
          },
          "issn": {
            "type": "string",
            "nullable": true,
            "description": "Publication issn",
            "example": "2049-3630"
          },
          "isbn": {
            "type": "string",
            "nullable": true,
            "description": "Publication isbn",
            "example": "978-3-16-148410-0"
          },
          "volume": {
            "type": "number",
            "nullable": true,
            "description": "Publication volume",
            "example": 6
          },
          "issue": {
            "type": "number",
            "nullable": true,
            "description": "Publication issue",
            "example": 15
          },
          "firstpage": {
            "type": "number",
            "nullable": true,
            "description": "Publication firstpage",
            "example": 1
          },
          "lastpage": {
            "type": "number",
            "nullable": true,
            "description": "Publication lastpage",
            "example": 155
          },
          "publisher": {
            "type": "string",
            "nullable": true,
            "description": "Publication publisher name",
            "example": "John Doe"
          },
          "journalTitle": {
            "type": "string",
            "nullable": true,
            "description": "The title of the journal of the publication",
            "example": "My architecture journal"
          },
          "dissertationName": {
            "type": "string",
            "nullable": true,
            "description": "The dissertationName of the publication",
            "example": "Architecture in late 20s"
          },
          "inbookTitle": {
            "type": "string",
            "nullable": true,
            "description": "The title of the inbook refered in the publication",
            "example": "New horizons"
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "Language of the publication",
            "example": "es-ES"
          },
          "dissertationInstitution": {
            "type": "string",
            "nullable": true,
            "description": "Institution where the publications have been submitted",
            "example": "Orvium"
          },
          "technicalReportInstitution": {
            "type": "string",
            "nullable": true,
            "description": "Institution where the technical report have been done for the publication",
            "example": "Orvium"
          },
          "canonical": {
            "type": "string",
            "nullable": true,
            "description": "The canonical URL is the URL of the best representative page from a group of duplicate pages",
            "example": "example.com? dress=1234 and example.com/dresses/1234"
          }
        }
      },
      "FeedbackDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "example": "example@example.com"
          },
          "description": {
            "type": "string",
            "description": "Description of the feefback you want to send",
            "example": "I have an error in the example page"
          },
          "screenshot": {
            "type": "object",
            "description": "Optional screenshot to improve the feedback",
            "example": "example.png"
          },
          "data": {
            "type": "object",
            "description": "Extra feedback data"
          }
        },
        "required": [
          "description"
        ]
      },
      "FileExtensions": {
        "type": "string",
        "description": "Community preferred file extensions",
        "enum": [
          "pdf",
          "docx",
          "doc",
          "rtf",
          "tex",
          "epub",
          "odt",
          "zip"
        ]
      },
      "FileMetadata": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Name of the file",
            "example": "example.png"
          },
          "description": {
            "type": "string",
            "description": "Description of the file",
            "example": "Charts for presentation"
          },
          "contentType": {
            "type": "string",
            "description": "File type",
            "example": "pdf"
          },
          "contentLength": {
            "type": "number",
            "description": "Size of the file",
            "example": 1024
          },
          "tags": {
            "description": "Mark for what type of content the file is related",
            "example": "[profile]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "description": "URL where the image is hosted\n\"   *",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/banner.png"
          }
        },
        "required": [
          "filename",
          "description",
          "contentType",
          "contentLength",
          "tags"
        ]
      },
      "HistoryLogLine": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp for when the log entry was created"
          },
          "username": {
            "type": "string",
            "description": "Identifier for the user who made the change"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the action taken"
          }
        },
        "required": [
          "createdAt",
          "username",
          "description"
        ]
      },
      "ImageType": {
        "type": "string",
        "description": "Type of the community image upload",
        "enum": [
          "logo",
          "banner",
          "card"
        ]
      },
      "InstitutionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Institution name",
            "example": "Orvium"
          },
          "domain": {
            "type": "string",
            "description": "Institution domain",
            "example": "orvium"
          },
          "country": {
            "type": "string",
            "description": "Institution country",
            "example": "Spain"
          },
          "city": {
            "type": "string",
            "description": "Institution city",
            "example": "Vitoria"
          },
          "synonym": {
            "type": "string",
            "description": "Another way of calling the institution",
            "example": "Orvium Labs"
          }
        },
        "required": [
          "name",
          "domain"
        ]
      },
      "InvitationDataDTO": {
        "type": "object",
        "properties": {
          "depositId": {
            "type": "string",
            "description": "Publication ID",
            "example": "617298619ff9664a706ca6fb"
          },
          "depositTitle": {
            "type": "string",
            "description": "Publication title",
            "example": "My first publication"
          },
          "reviewId": {
            "type": "string",
            "description": "Review ID",
            "example": "5ca50abe835e09000186f88e"
          }
        },
        "required": [
          "depositId",
          "depositTitle"
        ]
      },
      "InviteDTO": {
        "type": "object",
        "properties": {
          "inviteType": {
            "example": "review",
            "$ref": "#/components/schemas/InviteType"
          },
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/InviteStatus"
          },
          "_id": {
            "type": "string",
            "description": "Invite ID",
            "example": "6059d81f1ac885000823eef2"
          },
          "sender": {
            "type": "string"
          },
          "addressee": {
            "type": "string",
            "description": "Invitation addressee",
            "example": "john@example.com"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Invitation create on",
            "example": "2021-03-23T11:59:27.880+00:00"
          },
          "data": {
            "$ref": "#/components/schemas/InvitationDataDTO"
          },
          "actions": {
            "description": "Invitation actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateLimit": {
            "format": "date-time",
            "type": "string",
            "description": "Limit date of the invitation",
            "example": "2023-04-23T11:59:27.880+00:00"
          },
          "message": {
            "type": "string",
            "description": "The invitation message send to the reviewer",
            "example": "Dear John, I would like to invite you to review my publication"
          }
        },
        "required": [
          "inviteType",
          "status",
          "_id",
          "sender",
          "addressee",
          "createdOn",
          "data",
          "actions"
        ]
      },
      "InvitePopulatedDTO": {
        "type": "object",
        "properties": {
          "inviteType": {
            "example": "review",
            "$ref": "#/components/schemas/InviteType"
          },
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/InviteStatus"
          },
          "senderPopulated": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "_id": {
            "type": "string",
            "description": "Invite ID",
            "example": "6059d81f1ac885000823eef2"
          },
          "sender": {
            "type": "string"
          },
          "addressee": {
            "type": "string",
            "description": "Invitation addressee",
            "example": "john@example.com"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Invitation create on",
            "example": "2021-03-23T11:59:27.880+00:00"
          },
          "data": {
            "$ref": "#/components/schemas/InvitationDataDTO"
          },
          "actions": {
            "description": "Invitation actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateLimit": {
            "format": "date-time",
            "type": "string",
            "description": "Limit date of the invitation",
            "example": "2023-04-23T11:59:27.880+00:00"
          },
          "message": {
            "type": "string",
            "description": "The invitation message send to the reviewer",
            "example": "Dear John, I would like to invite you to review my publication"
          }
        },
        "required": [
          "inviteType",
          "status",
          "senderPopulated",
          "_id",
          "sender",
          "addressee",
          "createdOn",
          "data",
          "actions"
        ]
      },
      "InviteQueryDTO": {
        "type": "object",
        "properties": {
          "invites": {
            "description": "An array of invitations received by the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitePopulatedDTO"
            }
          },
          "count": {
            "type": "number",
            "description": "Number of invitations received by the query",
            "example": 2
          },
          "actions": {
            "description": "An array of actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "invites",
          "count"
        ]
      },
      "InviteStatus": {
        "type": "string",
        "description": "Invitation status",
        "enum": [
          "pending",
          "accepted",
          "rejected"
        ]
      },
      "InviteType": {
        "type": "string",
        "description": "Invitation type",
        "enum": [
          "review",
          "copy editing"
        ]
      },
      "InviteUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/InviteStatus"
          }
        },
        "required": [
          "status"
        ]
      },
      "IthenticatePayload": {
        "type": "object",
        "properties": {
          "depositId": {
            "type": "string"
          }
        },
        "required": [
          "depositId"
        ]
      },
      "Keys": {
        "type": "object",
        "properties": {
          "p256dh": {
            "type": "string"
          },
          "auth": {
            "type": "string"
          }
        },
        "required": [
          "p256dh",
          "auth"
        ]
      },
      "MessageDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Message ID",
            "example": "542c2b97bac0595474108b48"
          },
          "sender": {
            "type": "string",
            "description": "The user that send the message",
            "example": "john"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the message",
            "example": "15/07/1998 22:30"
          },
          "content": {
            "type": "string",
            "description": "Message content"
          },
          "conversation": {
            "type": "string",
            "description": "Conversation id",
            "example": "617298619ff9664a706ca6fb"
          },
          "readAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date of marked as read",
            "example": "15/07/1998 10:22"
          }
        },
        "required": [
          "_id",
          "sender",
          "createdAt",
          "content",
          "conversation"
        ]
      },
      "ModerateDepositPayload": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "reason"
        ]
      },
      "ModerateReviewPayload": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "reason"
        ]
      },
      "ModeratorRole": {
        "type": "string",
        "description": "User role as moderator",
        "enum": [
          "moderator",
          "admin",
          "owner"
        ]
      },
      "ModeratorUpdateDTO": {
        "type": "object",
        "properties": {
          "moderatorRole": {
            "example": "owner",
            "$ref": "#/components/schemas/ModeratorRole"
          },
          "notificationOptions": {
            "$ref": "#/components/schemas/NotificationOptions"
          }
        }
      },
      "NotificationOptions": {
        "type": "object",
        "properties": {
          "tracks": {
            "default": [],
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "tracks"
        ]
      },
      "OrderDTO": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "string",
            "description": "The ID of the community where the order has been made",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "products": {
            "description": "An array of ordered products",
            "example": "[product1, product2]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProductsDTO"
            }
          }
        },
        "required": [
          "communityId",
          "products"
        ]
      },
      "OrderProductsDTO": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "quantity": {
            "type": "number",
            "description": "Product quantity ordered",
            "example": 2
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "PaginationLimit": {
        "type": "string",
        "enum": [
          10,
          25
        ]
      },
      "PaymentDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Payment ID",
            "example": "63a2f2495f4fbb7d72bc3fd2"
          },
          "customerEmail": {
            "type": "string",
            "description": "Customer email",
            "example": "example@example.com"
          },
          "userId": {
            "type": "string",
            "description": "Customer Orvium user id",
            "example": "63a2f2495f4fbb7d72bc3fd2"
          },
          "stripeAccount": {
            "type": "string",
            "description": "The Stripe account ID",
            "example": "acct_xxxxxxxxxxxxxxxxxx"
          },
          "checkoutSessionId": {
            "type": "string",
            "description": "Unique identifier for the Stripe object: Checkout Session",
            "example": "cs_test_a1h7FO586nlXiQrA2VkHEOloRAb1LmAeejcHtDTZ9mhxQFVOiF33vM60bj"
          },
          "eventName": {
            "type": "string",
            "description": "The name of the Stripe event",
            "example": "checkout.session"
          },
          "eventId": {
            "type": "string",
            "description": "The unique identifier for the Stripe event",
            "example": "evt_1MKfG8BNcBPovNvQzO26ZobS"
          },
          "eventStatus": {
            "type": "string",
            "description": "The status for the saved Stripe Checkout Session event. The status can be: 'open', 'complete', or 'expired'.\n'open': The checkout session is still in progress. Payment processing has not started.\n'complete': The checkout session is complete. Payment processing may still be in progress.\n'expired': The checkout session has expired. No further processing will occur.",
            "example": "complete"
          },
          "receiptUrl": {
            "type": "string",
            "description": "This is the URL to view Stripe automatically generates receipt for this payment.",
            "example": "https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTUsycktCTmNCUG92TnZRKNLpup0GMgao-VdsULA6LBbel3G_yFCkt1CmSOXUx8WInuq-xEiAoeOc60ad9A5zyQaG7Ci1Wj-C1hga"
          },
          "amountTotal": {
            "type": "number",
            "description": "The total amount of the payment",
            "example": "60"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment",
            "example": "eur"
          },
          "communityName": {
            "type": "string",
            "description": "The name of the Community in which the payment has been made",
            "example": "Orvium Community"
          },
          "community": {
            "type": "string",
            "description": "The ID of the Community in which the payment has been made",
            "example": "63ac712a7224149182794daf"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the payment has been made",
            "example": "2022-12-30T09:52:19.126+00:00"
          },
          "order": {
            "description": "The order that has been made in this payment",
            "example": "Object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDTO"
              }
            ]
          },
          "eventContent": {
            "type": "object",
            "description": "All the data of the event",
            "example": ""
          },
          "actions": {
            "description": "List of actions available",
            "example": [
              "update"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_id",
          "customerEmail",
          "userId",
          "stripeAccount",
          "checkoutSessionId",
          "eventName",
          "eventId",
          "eventStatus",
          "amountTotal",
          "currency",
          "communityName",
          "community",
          "date",
          "eventContent",
          "actions"
        ]
      },
      "PaymentQueryDTO": {
        "type": "object",
        "properties": {
          "payments": {
            "description": "An array of payments received by the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDTO"
            }
          },
          "count": {
            "type": "number",
            "description": "Number of payments received by the query",
            "example": 2
          },
          "actions": {
            "description": "An array of actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "payments",
          "count"
        ]
      },
      "PermissionsDTO": {
        "type": "object",
        "properties": {
          "community": {
            "description": "Permission of the community",
            "example": "\"[\"read\",\"join\"]\"",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "community"
        ]
      },
      "PlatformImageType": {
        "type": "string",
        "description": "Type of the platform image upload",
        "enum": [
          "logo",
          "logo-icon",
          "favicon"
        ]
      },
      "PlatformUploadConfirmation": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string"
          },
          "fileMetadata": {
            "$ref": "#/components/schemas/FileMetadata"
          }
        },
        "required": [
          "imageType",
          "fileMetadata"
        ]
      },
      "ProfileImageType": {
        "type": "string",
        "description": "Type of the profile image upload",
        "enum": [
          "avatar",
          "banner"
        ]
      },
      "ProfileUploadConfirmation": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string"
          },
          "fileMetadata": {
            "$ref": "#/components/schemas/FileMetadata"
          }
        },
        "required": [
          "imageType",
          "fileMetadata"
        ]
      },
      "PublicationType": {
        "type": "string",
        "description": "Publication Type",
        "enum": [
          "book",
          "book section",
          "conference paper",
          "article",
          "patent",
          "poster",
          "preprint",
          "report",
          "dataset",
          "software documentation",
          "thesis",
          "technical note",
          "working paper",
          "policy report",
          "registered report",
          "proposal",
          "review article",
          "video",
          "abstract",
          "extended abstract",
          "other"
        ]
      },
      "PushSubscriptionCreateDTO": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "The name of the endpoint is activating the notification",
            "example": "confirmEmail"
          },
          "expirationTime": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the subscription",
            "example": "21/12/2022"
          },
          "keys": {
            "description": "A string with the encryption method used to generate a client key\np256d: public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve)\nauth: An authentication secret - https://datatracker.ietf.org/doc/html/draft-ietf-webpush-encryption-08",
            "allOf": [
              {
                "$ref": "#/components/schemas/Keys"
              }
            ]
          }
        },
        "required": [
          "endpoint",
          "keys"
        ]
      },
      "PushSubscriptionDTO": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "The name of the endpoint is activating the notification",
            "example": "confirmEmail"
          },
          "expirationTime": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date of the subscription",
            "example": "21/12/2022"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "keys": {
            "description": "A string with the encryption method used to generate a client key\np256d: public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve)\nauth: An authentication secret - https://datatracker.ietf.org/doc/html/draft-ietf-webpush-encryption-08",
            "allOf": [
              {
                "$ref": "#/components/schemas/Keys"
              }
            ]
          }
        },
        "required": [
          "endpoint",
          "keys"
        ]
      },
      "Reference": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "The content of the reference",
            "example": "Barlow, J., Hendy, J., & Tucker, D. A. (2016). Managing major health service and infrastructure transitions: A comparative study of UK, US and Canadian hospitals. World Health Design, 9(1), 8-22."
          },
          "url": {
            "type": "string",
            "description": "The url where the reference was taken from",
            "example": "https://repository.essex.ac.uk/16327/"
          }
        },
        "required": [
          "reference"
        ]
      },
      "RequestDataDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "A user's personal data",
            "example": "User = {}"
          }
        },
        "required": [
          "data"
        ]
      },
      "ReviewDecision": {
        "type": "string",
        "description": "Review decision",
        "enum": [
          "accepted",
          "minor revision",
          "major revision"
        ]
      },
      "ReviewHtmlPreviewDTO": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "description": "Review invitation html"
          }
        },
        "required": [
          "html"
        ]
      },
      "ReviewKind": {
        "type": "string",
        "description": "Review kind",
        "enum": [
          "peer review",
          "copy editing"
        ]
      },
      "ReviewPopulatedDTO": {
        "type": "object",
        "properties": {
          "decision": {
            "example": "accepted",
            "$ref": "#/components/schemas/ReviewDecision"
          },
          "transactions": {
            "type": "object",
            "description": "Review transactions",
            "example": "",
            "additionalProperties": true
          },
          "status": {
            "example": "draft",
            "$ref": "#/components/schemas/ReviewStatus"
          },
          "kind": {
            "example": "peer review",
            "$ref": "#/components/schemas/ReviewKind"
          },
          "doiStatus": {
            "example": "Published",
            "$ref": "#/components/schemas/DoiStatus"
          },
          "ownerProfile": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "depositPopulated": {
            "$ref": "#/components/schemas/DepositDTO"
          },
          "communityPopulated": {
            "$ref": "#/components/schemas/CommunityDTO"
          },
          "socialComments": {
            "type": "number",
            "description": "Number of comments associated with this publication"
          },
          "_id": {
            "type": "string",
            "description": "Review ID",
            "example": "5ca50abe835e09000186f88e"
          },
          "creator": {
            "type": "string",
            "description": "Review creator ID",
            "example": "5cafc10c1061680001ea4762"
          },
          "author": {
            "type": "string",
            "description": "Review  author",
            "example": "The author"
          },
          "comments": {
            "type": "string",
            "description": "Review comments",
            "example": "Some comments"
          },
          "file": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "extraFiles": {
            "description": "List of extra files metadata for this review. Extra files are optional.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          },
          "url": {
            "type": "string",
            "description": "Review url",
            "example": "https://d23p029t55fvl2.cloudfront.net"
          },
          "gravatar": {
            "type": "string",
            "description": "Review gravatar",
            "example": "07de5cb10305a6e4c1844a14ac0b01a8"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "reward": {
            "type": "number",
            "description": "Review reward",
            "example": 0
          },
          "doi": {
            "type": "string",
            "description": "DOI of the review",
            "example": "\"\"https://doi.org/10.0000/0000\""
          },
          "deposit": {
            "type": "string",
            "description": "the deposit of the review",
            "example": ""
          },
          "community": {
            "type": "string",
            "description": "the community of the review",
            "example": ""
          },
          "creationDate": {
            "type": "string",
            "description": "Review creation date",
            "example": "2020-10-29T15:56:35.306+00:00"
          },
          "publicationDate": {
            "type": "string",
            "description": "Review publication date",
            "example": "2020-10-29T15:56:35.306+00:00"
          },
          "wasInvited": {
            "type": "boolean",
            "description": "was invited for a review",
            "example": false
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          },
          "keccak256": {
            "type": "string",
            "description": "Keccak256 is a cryptographic function built into solidity. Can be used for cryptographic signature with a small size.",
            "example": ""
          },
          "actions": {
            "description": "Review actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "html": {
            "type": "string",
            "description": "Html extracted automatically for the main review file",
            "example": "<p>This publication is about...</p>"
          },
          "images": {
            "description": "List of images extracted automatically for the main review file",
            "example": [
              "image1.png",
              "image2.png"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pdfUrl": {
            "type": "string",
            "description": "The url for the pdf of the review. This pdf might have been automatically generated.",
            "example": "https://dapp.orvium.io/api/v1/reviews/63a09f6ce3d5ff0813586171/pdf"
          },
          "history": {
            "description": "Review history",
            "example": "{createAt:2020-10-29T15:56:35.306+00:00, username: iker2a4a34, description: this is history }",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryLogLine"
            }
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          },
          "views": {
            "type": "number",
            "description": "The number of views of the review",
            "example": 1555
          }
        },
        "required": [
          "decision",
          "status",
          "kind",
          "ownerProfile",
          "depositPopulated",
          "communityPopulated",
          "socialComments",
          "_id",
          "creator",
          "author",
          "extraFiles",
          "deposit",
          "community",
          "creationDate",
          "showIdentityToAuthor",
          "showIdentityToEveryone",
          "actions",
          "images",
          "history",
          "showReviewToAuthor",
          "showReviewToEveryone",
          "views"
        ]
      },
      "ReviewStatus": {
        "type": "string",
        "description": "Review status",
        "enum": [
          "draft",
          "published",
          "pending approval"
        ]
      },
      "ReviewSummaryDTO": {
        "type": "object",
        "properties": {
          "status": {
            "example": "draft",
            "$ref": "#/components/schemas/ReviewStatus"
          },
          "kind": {
            "example": "peer review",
            "$ref": "#/components/schemas/ReviewKind"
          },
          "decision": {
            "example": "accepted",
            "$ref": "#/components/schemas/ReviewDecision"
          },
          "_id": {
            "type": "string",
            "description": "Review ID",
            "example": "5ca50abe835e09000186f88e"
          },
          "creator": {
            "type": "string",
            "description": "Review creator ID",
            "example": "5cafc10c1061680001ea4762"
          },
          "ownerProfile": {
            "$ref": "#/components/schemas/UserSummaryDTO"
          },
          "doi": {
            "type": "string",
            "description": "DOI of the review",
            "example": "\"\"https://doi.org/10.0000/0000\""
          },
          "gravatar": {
            "type": "string",
            "description": "Review gravatar",
            "example": "07de5cb10305a6e4c1844a14ac0b01a8"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "wasInvited": {
            "type": "boolean",
            "description": "was invited for a review",
            "example": false
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the everyone",
            "example": true
          }
        },
        "required": [
          "status",
          "kind",
          "_id",
          "creator",
          "ownerProfile",
          "showIdentityToAuthor",
          "showIdentityToEveryone"
        ]
      },
      "ReviewType": {
        "type": "string",
        "description": "Visibility of the peer reviews",
        "enum": [
          "open review"
        ]
      },
      "ReviewsPopulatedQueryDTO": {
        "type": "object",
        "properties": {
          "reviews": {
            "description": "the reviews query",
            "example": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewPopulatedDTO"
            }
          },
          "count": {
            "type": "number",
            "description": "the reviews query count",
            "example": 2
          },
          "actions": {
            "description": "the reviews query actions",
            "example": "[Update]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "reviews",
          "count"
        ]
      },
      "SendCommunityEmailsDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "message",
          "subject",
          "emails"
        ]
      },
      "SendInviteBody": {
        "type": "object",
        "properties": {
          "emails": {
            "description": "emails of the invitation",
            "example": "[john@example.com]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "emails"
        ]
      },
      "SessionCreateDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Session title",
            "example": "User-experience and co-design (3A) – chair: Göran Lindahl"
          },
          "description": {
            "type": "string",
            "description": "The description of the session",
            "example": "11:00 Iris Beuls Exploring photo-elicitation to elicit architecturally rich users’ experiences with(in) palliative environments through a human-centred approach: a pilot study"
          },
          "community": {
            "type": "string",
            "description": "The ID of the community where the session is created",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track of the session",
            "example": "user-needs"
          },
          "dateStart": {
            "format": "date-time",
            "type": "string",
            "description": "Session start date",
            "example": "21/12/2022"
          },
          "dateEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Session end date",
            "example": "22/12/2022"
          }
        },
        "required": [
          "title",
          "community",
          "dateStart",
          "dateEnd"
        ]
      },
      "SessionDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Session ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "title": {
            "type": "string",
            "description": "Session Title",
            "example": "Coffee break"
          },
          "creator": {
            "type": "string",
            "description": "Session creator ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track timpestamp of the session",
            "example": 123435645456
          },
          "description": {
            "type": "string",
            "description": "The description of the session",
            "example": "11:00 Iris Beuls Exploring photo-elicitation to elicit architecturally rich users’ experiences with(in) palliative environments through a human-centred approach: a pilot study"
          },
          "community": {
            "type": "string",
            "description": "The ID of the community where the session is created",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "dateStart": {
            "format": "date-time",
            "type": "string",
            "description": "Session start date",
            "example": "21/12/2022"
          },
          "speakers": {
            "description": "Speakers of the current session",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeakerDTO"
            }
          },
          "dateEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Session end date",
            "example": "21/12/2022"
          },
          "deposits": {
            "description": "Publications ID related to the session",
            "example": "[5fa1908fd29a17dc961cc435, 5fa1908fd29a17dc961cc435]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "description": "Session actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_id",
          "title",
          "creator",
          "community",
          "speakers",
          "deposits",
          "actions"
        ]
      },
      "SessionUpdateDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Session title",
            "example": "User-experience and co-design (3A) – chair: Göran Lindahl"
          },
          "description": {
            "type": "string",
            "description": "The description of the session",
            "example": "11:00 Iris Beuls Exploring photo-elicitation to elicit architecturally rich users’ experiences with(in) palliative environments through a human-centred approach: a pilot study"
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track timestamp of the session",
            "example": 2354632456
          },
          "speakers": {
            "description": "Speakers of the current session",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeakerDTO"
            }
          },
          "dateStart": {
            "format": "date-time",
            "type": "string",
            "description": "Session start date",
            "example": "21/12/2022"
          },
          "dateEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Session end date",
            "example": "21/12/2022"
          },
          "deposits": {
            "description": "Publications ID related to the session",
            "example": "[5fa1908fd29a17dc961cc435, 5fa1908fd29a17dc961cc435]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SignedUrlDTO": {
        "type": "object",
        "properties": {
          "signedUrl": {
            "type": "string"
          },
          "fileMetadata": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "isMainFile": {
            "type": "boolean"
          },
          "replacePDF": {
            "type": "boolean"
          }
        },
        "required": [
          "signedUrl",
          "fileMetadata",
          "isMainFile",
          "replacePDF"
        ]
      },
      "SimilarityMetadata": {
        "type": "object",
        "properties": {
          "overall_match_percentage": {
            "type": "number"
          },
          "internet_match_percentage": {
            "type": "number",
            "nullable": true
          },
          "publication_match_percentage": {
            "type": "number",
            "nullable": true
          },
          "submitted_works_match_percentage": {
            "type": "number",
            "nullable": true
          },
          "submission_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "time_generated": {
            "type": "string"
          },
          "time_requested": {
            "type": "string"
          },
          "top_matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimilarityMetadataAllOfTopMatches"
            }
          },
          "top_source_largest_matched_word_count": {
            "type": "number"
          }
        },
        "required": [
          "overall_match_percentage",
          "submission_id",
          "status",
          "time_generated",
          "time_requested",
          "top_matches",
          "top_source_largest_matched_word_count"
        ]
      },
      "SimilarityMetadataAllOfTopMatches": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "percentage": {
            "type": "number"
          },
          "submission_id": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          },
          "matched_word_count_total": {
            "type": "number"
          },
          "submitted_date": {
            "type": "string"
          },
          "institution_name": {
            "type": "string"
          }
        }
      },
      "SimilarityViewerUrlResponseDTO": {
        "type": "object",
        "properties": {
          "viewer_url": {
            "type": "string"
          }
        },
        "required": [
          "viewer_url"
        ]
      },
      "SimpleSubmissionResponseClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleSubmissionResponseStatusEnum"
          },
          "created_time": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "owner",
          "title",
          "status",
          "created_time"
        ]
      },
      "SimpleSubmissionResponseStatusEnum": {
        "type": "string",
        "enum": [
          "CREATED",
          "PROCESSING",
          "COMPLETE"
        ]
      },
      "SpeakerDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID of the speaker",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "firstName": {
            "type": "string",
            "description": "Speaker first name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "Speaker last name",
            "example": "doe"
          },
          "nickname": {
            "type": "string",
            "description": "Speaker nickname generated in the platform",
            "example": "john-doe"
          },
          "orcid": {
            "type": "string",
            "description": "Speaker orcid",
            "example": "0000-0001-5000-0007"
          },
          "tags": {
            "description": "Tags related to the speaker",
            "example": "[Architecture]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gravatar": {
            "type": "string",
            "description": "Generated gravatar for the speaker with md5hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "institutions": {
            "description": "An array with the institutions of the speaker",
            "example": "[Orvium, Tech]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "firstName",
          "lastName",
          "tags",
          "institutions"
        ]
      },
      "StringDataPayload": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        },
        "required": [
          "data"
        ]
      },
      "StripeCheckoutDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout.",
            "example": "https://checkout.stripe.com/c/pay/cs_test_bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxvLR#xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
          },
          "actions": {
            "description": "List of actions available",
            "example": [
              "update"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "url",
          "actions"
        ]
      },
      "StripeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the stripe account",
            "example": "acct_xxxxxxxxxxxxxxxx"
          },
          "active": {
            "type": "boolean",
            "description": "Check if the stripe account is active now",
            "example": true
          },
          "defaultCurrency": {
            "type": "string",
            "description": "The default currency configured in the stripe account",
            "example": "eur"
          }
        },
        "required": [
          "id",
          "active"
        ]
      },
      "StripeLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object Stripe LineItem. LineItem is A list of items the customer is being quoted for.",
            "example": "li_1MOiBfBNcBPovNvQWMAQkH59"
          },
          "object": {
            "type": "string",
            "description": "String representing the objects type.",
            "example": "item"
          },
          "amount_discount": {
            "type": "number",
            "description": "Total discount amount applied. If no discounts were applied, defaults to 0.",
            "example": "0"
          },
          "amount_subtotal": {
            "type": "number",
            "description": "Total before any discounts or taxes are applied.",
            "example": "0"
          },
          "amount_tax": {
            "type": "number",
            "description": "Total tax amount applied. If no tax was applied, defaults to 0.",
            "example": "0"
          },
          "amount_total": {
            "type": "number",
            "description": "Total after discounts and taxes.",
            "example": "10"
          },
          "currency": {
            "type": "string",
            "description": "It is the currency in which payments can be made in that community. Must be a supported currency.",
            "example": "eur"
          },
          "description": {
            "type": "string",
            "description": "A string attached to the object. Often useful for displaying to users. Defaults to product name.",
            "example": "2 days ticket for Physics Conference"
          },
          "discounts": {
            "description": "The discounts applied to the line item. This field is not included by default. To include it in the response, expand the discounts field.",
            "example": "[]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "price": {
            "type": "object",
            "description": "The price used to generate the line item.",
            "example": "10"
          },
          "product": {
            "type": "object",
            "description": "Products describe the specific goods or services you offer to your customers.",
            "example": ""
          },
          "quantity": {
            "type": "object",
            "description": "The quantity of products being purchased.",
            "example": "1"
          },
          "taxes": {
            "description": "The taxes applied to the line item. This field is not included by default.",
            "example": "0",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "object",
          "amount_discount",
          "amount_subtotal",
          "amount_tax",
          "amount_total",
          "currency",
          "description",
          "discounts",
          "price",
          "product",
          "quantity",
          "taxes"
        ]
      },
      "StripeOnboardPayload": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "string"
          }
        },
        "required": [
          "communityId"
        ]
      },
      "StripeOnboardingUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "StripePrice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object Price. Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.",
            "example": "price_1MOiTKBNcBPovNvQbRuljPTm"
          },
          "object": {
            "type": "string",
            "description": "String representing the objects type.",
            "example": "price"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the price can be used for new purchases.",
            "example": "true"
          },
          "billing_scheme": {
            "type": "string",
            "description": "Describes how to compute the price per period. Either per_unit or tiered.",
            "example": "per_unit"
          },
          "created": {
            "type": "number",
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "example": "1673359598"
          },
          "currency": {
            "type": "string",
            "description": "It is the currency in which payments can be made in that community. Must be a supported currency.",
            "example": "eur"
          },
          "custom_unit_amount": {
            "type": "object",
            "nullable": true,
            "description": "When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.",
            "example": "null"
          },
          "livemode": {
            "type": "boolean",
            "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example": "false"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. ",
            "example": "{}"
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "description": "A brief description of the price, hidden from customers.",
            "example": "null"
          },
          "recurring": {
            "type": "object",
            "nullable": true,
            "description": "The recurring components of a price such as interval and usage_type.",
            "example": "{}"
          },
          "tax_behavior": {
            "type": "string",
            "nullable": true,
            "description": "Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or unspecified. Once specified as either inclusive or exclusive, it cannot be changed.",
            "example": "unspecified"
          },
          "type": {
            "type": "string",
            "description": "One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.",
            "example": "one_time"
          },
          "unit_amount": {
            "type": "number",
            "nullable": false,
            "description": "A positive integer in cents (or 0 for a free price) representing how much to charge. One of unit_amount or custom_unit_amount is required, unless billing_scheme=tiered.",
            "example": "2000"
          },
          "unit_amount_decimal": {
            "type": "string",
            "nullable": false,
            "description": "Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unit_amount and unit_amount_decimal can be set.",
            "example": "2000"
          }
        },
        "required": [
          "id",
          "object",
          "currency",
          "unit_amount",
          "unit_amount_decimal"
        ]
      },
      "StripeProductDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object Product. Products describe the specific goods or services you offer to your customers.",
            "example": "prod_N4opFLi7XNPtQr"
          },
          "object": {
            "type": "string",
            "description": "String representing the objects type.",
            "example": "product"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the product is currently available for purchase.",
            "example": "true"
          },
          "attributes": {
            "nullable": true,
            "description": "The product attributes",
            "example": "null",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "caption": {
            "type": "string",
            "nullable": true,
            "description": "The product caption",
            "example": "null"
          },
          "created": {
            "type": "number",
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "example": "1672393645"
          },
          "default_price": {
            "nullable": true,
            "description": "The Price that is the default price for this product.",
            "example": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/StripePrice"
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.",
            "example": "This is 2 days ticket for Physics Conference"
          },
          "images": {
            "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer.",
            "example": [
              "https://files.stripe.com/links/MDB8YWNjdF8xTUsycktCTmNCUG92TnZRfGZsX3Rlc3RfeWV5cjUzRHlRNzZJSVloTzd1ZERHTVdU00YFbzgM7G"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "livemode": {
            "type": "boolean",
            "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example": "false"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": "{}"
          },
          "name": {
            "type": "string",
            "description": "The product’s name, meant to be displayable to the customer.",
            "example": "2 days ticket for Physics Conference"
          },
          "package_dimensions": {
            "type": "object",
            "nullable": true,
            "description": "The dimensions of this product for shipping purposes.",
            "example": "null"
          },
          "shippable": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether this product is shipped (i.e., physical goods).",
            "example": "null"
          },
          "statement_descriptor": {
            "type": "string",
            "nullable": true,
            "description": "Extra information about a product which will appear on your customer’s credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.",
            "example": "null"
          },
          "type": {
            "type": "string",
            "description": "Whether the product was a good or service.",
            "example": "good"
          },
          "unit_label": {
            "type": "string",
            "nullable": true,
            "description": "A label that represents units of this product. When set, this will be included in customers’ receipts, invoices, Checkout, and the customer portal.",
            "example": "null"
          },
          "updated": {
            "type": "number",
            "description": "Time at which the object was last updated. Measured in seconds since the Unix epoch.",
            "example": "1672393646"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "description": "A URL of a publicly-accessible webpage for this product.",
            "example": "null"
          },
          "actions": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "object",
          "actions"
        ]
      },
      "SubmissionClass": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubmissionStatusEnum"
          },
          "id": {
            "type": "string"
          },
          "error_code": {
            "$ref": "#/components/schemas/SubmissionErrorCodeEnum"
          }
        },
        "required": [
          "owner",
          "title",
          "status",
          "id",
          "error_code"
        ]
      },
      "SubmissionErrorCodeEnum": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_FILETYPE",
          "PROCESSING_ERROR",
          "CANNOT_EXTRACT_TEXT",
          "TOO_LITTLE_TEXT",
          "TOO_MUCH_TEXT",
          "TOO_MANY_PAGES",
          "FILE_LOCKED",
          "CORRUPT_FILE"
        ]
      },
      "SubmissionStatusEnum": {
        "type": "string",
        "enum": [
          "CREATED",
          "PROCESSING",
          "COMPLETED"
        ]
      },
      "SubscriptionType": {
        "type": "string",
        "description": "Community subscription",
        "enum": [
          "free",
          "premium"
        ]
      },
      "TemplateCategory": {
        "type": "string",
        "description": "Mark if the email template is a system or a customizable email",
        "enum": [
          "system",
          "moderator",
          "community",
          "publication",
          "review",
          "review-invitation",
          "editor"
        ]
      },
      "TemplateCreateCustomizedDto": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "string",
            "description": "The community ID where the email template belong",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "template": {
            "type": "string",
            "description": "The content of the email template",
            "example": "<table style=width: 600px; margin-left: auto; margin-right: auto; border: 0;></table>"
          }
        },
        "required": [
          "communityId",
          "template"
        ]
      },
      "TemplateCreateDTO": {
        "type": "object",
        "properties": {
          "category": {
            "example": "system",
            "$ref": "#/components/schemas/TemplateCategory"
          },
          "name": {
            "type": "string",
            "description": "Email template name",
            "example": "confirm-email"
          },
          "template": {
            "type": "string",
            "description": "The content of the email template"
          },
          "community": {
            "type": "string",
            "description": "The community ID where the email template belong",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "isCustomizable": {
            "type": "boolean",
            "description": "Check if the email is customizable by the community or a system email",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "The description of the template"
          },
          "title": {
            "type": "string",
            "description": "Email template title"
          }
        },
        "required": [
          "category",
          "name",
          "template",
          "community",
          "isCustomizable",
          "description",
          "title"
        ]
      },
      "TemplateDTO": {
        "type": "object",
        "properties": {
          "category": {
            "example": "system",
            "$ref": "#/components/schemas/TemplateCategory"
          },
          "_id": {
            "type": "string",
            "description": "Template ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "name": {
            "type": "string",
            "description": "Email template name",
            "example": "confirm-email"
          },
          "template": {
            "type": "string",
            "description": "The content of the email template",
            "example": "<table style=width: 600px; margin-left: auto; margin-right: auto; border: 0;></table>"
          },
          "compiledTemplate": {
            "type": "string",
            "description": "The content of the email template compilated",
            "example": "\"<table style=\"width: 600px; margin-left: auto; margin-right: auto; border: 0;\"></table>\""
          },
          "community": {
            "type": "string",
            "description": "The community ID where the email template belong",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "actions": {
            "description": "Template actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the template",
            "example": "This email is sent to confirm your email by copying the code of the email in the last step of the onboarding."
          },
          "title": {
            "type": "string",
            "description": "Email template title",
            "example": "Confirmation email"
          },
          "isCustomizable": {
            "type": "boolean",
            "description": "Check if the email is customizable by the community or a system email",
            "example": true
          }
        },
        "required": [
          "category",
          "_id",
          "name",
          "template",
          "actions",
          "title",
          "isCustomizable"
        ]
      },
      "TemplateUpdateDto": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "The content of the email template",
            "example": "<table style=width: 600px; margin-left: auto; margin-right: auto; border: 0;></table>"
          }
        },
        "required": [
          "template"
        ]
      },
      "TopDisciplinesDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Discipline ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "count": {
            "type": "number",
            "description": "Position of the discipline in the popular disciplines ranking",
            "example": 3
          }
        },
        "required": [
          "_id",
          "count"
        ]
      },
      "Track": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp for the track"
          },
          "title": {
            "type": "string",
            "description": "Title of the track"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the track"
          }
        },
        "required": [
          "timestamp",
          "title"
        ]
      },
      "UpdateCommunityStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdateDepositDTO": {
        "type": "object",
        "properties": {
          "publicationType": {
            "example": "Research article",
            "$ref": "#/components/schemas/PublicationType"
          },
          "accessRight": {
            "example": "CC CY",
            "$ref": "#/components/schemas/AccessRight"
          },
          "status": {
            "example": "accepted",
            "$ref": "#/components/schemas/DepositStatus"
          },
          "reviewType": {
            "example": "Open Review",
            "$ref": "#/components/schemas/ReviewType"
          },
          "transactions": {
            "type": "object",
            "description": "List of blockchain transaction associated with this publication",
            "additionalProperties": true
          },
          "title": {
            "type": "string",
            "description": "Publication title",
            "example": "My first publication"
          },
          "abstract": {
            "type": "string",
            "description": "Publication abstract",
            "example": "This is a publication about the galaxy"
          },
          "assignee": {
            "type": "string",
            "description": "Editor ID assigned to the publication",
            "example": "617298619ff9664a706ca6fb"
          },
          "publicationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Publication date",
            "example": "21/10/2023"
          },
          "submissionDate": {
            "format": "date-time",
            "type": "string",
            "description": "Submission date",
            "example": "21/10/2023"
          },
          "authors": {
            "description": "List of authors of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorUpdateDTO"
            }
          },
          "keccak256": {
            "type": "string",
            "description": "Keccak256 hash of the main publication file.\nKeccak256 is a cryptographic function built into solidity. Can be used for cryptographic signature with a small size."
          },
          "keywords": {
            "description": "List of keywords for the publication",
            "example": [
              "Medical"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "doi": {
            "type": "string",
            "description": "DOI of the publication",
            "example": "https://doi.org/10.0000/0000"
          },
          "disciplines": {
            "description": "List of disciplines associated to the publication",
            "example": [
              "urban-rural"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "description": "List of references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "bibtexReferences": {
            "description": "List of bibtex references of the publication",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BibtexReferences"
            }
          },
          "newTrackTimestamp": {
            "type": "number",
            "description": "The track timestamp of the publication",
            "example": 15437645678
          },
          "canBeReviewed": {
            "type": "boolean",
            "description": "This flag enables the creation of peer reviews for this publication",
            "example": "true"
          },
          "canAuthorInviteReviewers": {
            "type": "boolean",
            "description": "Deposit internal option to give permission to authors to invite reviewers",
            "example": false
          },
          "gitRepository": {
            "type": "string",
            "description": "The url of the associated git repository",
            "example": "https://github.com/orvium/zenodo"
          },
          "extraMetadata": {
            "description": "Extra information required by journals and conferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraMetadata"
              }
            ]
          },
          "html": {
            "type": "string",
            "description": "Html extracted automatically for the main publication file",
            "example": "<p>This publication is about...</p>"
          }
        }
      },
      "UpdateReviewDTO": {
        "type": "object",
        "properties": {
          "decision": {
            "example": "accepted",
            "$ref": "#/components/schemas/ReviewDecision"
          },
          "transactions": {
            "type": "object",
            "description": "Review transactions",
            "example": "",
            "additionalProperties": true
          },
          "author": {
            "type": "string",
            "description": "Review  author",
            "example": "The author"
          },
          "comments": {
            "type": "string",
            "description": "Review comments",
            "example": "Some comments"
          },
          "reward": {
            "type": "number",
            "description": "Review reward",
            "example": 0
          },
          "doi": {
            "type": "string",
            "description": "DOI of the review",
            "example": "\"\"https://doi.org/10.0000/0000\""
          },
          "publicationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Review publication date",
            "example": "2020-10-29T15:56:35.306+00:00"
          },
          "wasInvited": {
            "type": "boolean",
            "description": "was invited for a review",
            "example": false
          },
          "html": {
            "type": "string",
            "description": "Html extracted automatically for the main review file",
            "example": "<p>This publication is about...</p>"
          },
          "keccak256": {
            "type": "string",
            "description": "Keccak256 is a cryptographic function built into solidity. Can be used for cryptographic signature with a small size.",
            "example": ""
          },
          "reason": {
            "type": "string",
            "description": "Reason to accept a review",
            "example": "The content is very interesting"
          },
          "showReviewToAuthor": {
            "type": "boolean",
            "description": "The review is shown to the author of the publication",
            "example": true
          },
          "showReviewToEveryone": {
            "type": "boolean",
            "description": "The review is shown to everyone",
            "example": true
          },
          "showIdentityToAuthor": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to the author of the publication",
            "example": true
          },
          "showIdentityToEveryone": {
            "type": "boolean",
            "description": "The identity of the reviewer is shown to everyone",
            "example": true
          }
        }
      },
      "UpdateUserDTO": {
        "type": "object",
        "properties": {
          "userType": {
            "example": "Medical",
            "$ref": "#/components/schemas/UserType"
          },
          "emailPendingConfirmation": {
            "type": "string",
            "description": "User email",
            "example": "example@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "User fist name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "doe"
          },
          "aboutMe": {
            "type": "string",
            "description": "User description",
            "example": "Working in a tech department"
          },
          "orcid": {
            "type": "string",
            "description": "User orcid",
            "example": "0000-0001-5000-0007"
          },
          "linkedin": {
            "type": "string",
            "description": "User linkedin url",
            "example": "https://www.linkedin.com/in/john-doe"
          },
          "blog": {
            "type": "string",
            "description": "Blog url",
            "example": "https://myblog.com"
          },
          "institutions": {
            "description": "Institutions of the user",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "role": {
            "type": "string",
            "description": "User role in the platform",
            "example": "moderator"
          },
          "starredDeposits": {
            "description": "Publications where the user is mentioned as author or submitter in the platform",
            "example": "[63a09f6ce3d5ff0813586171,63a09f6ce3d5ff0813586176]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isOnboarded": {
            "type": "boolean",
            "description": "Check if the user has finished the sign-up",
            "example": false
          },
          "acceptedTC": {
            "type": "boolean",
            "description": "Check if the user has accepted the Terms and Conditions",
            "example": true
          },
          "communities": {
            "description": "Communities that have joined the user",
            "example": "[5fa1908fd29a17dc961cc435]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disciplines": {
            "description": "User disciplines",
            "example": "Medical",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "impersonatedUser": {
            "type": "string",
            "description": "Check if the user is impersonating another user",
            "example": false
          }
        }
      },
      "UpdateUserRoleDTO": {
        "type": "object",
        "properties": {
          "role": {
            "example": "moderator",
            "$ref": "#/components/schemas/ModeratorRole"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "example@example.com"
          }
        },
        "required": [
          "role",
          "email"
        ]
      },
      "UploadBibtexFilePayload": {
        "type": "object",
        "properties": {
          "bibtexReferences": {
            "type": "string"
          }
        },
        "required": [
          "bibtexReferences"
        ]
      },
      "UploadFilePayload": {
        "type": "object",
        "properties": {
          "fileMetadata": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "isMainFile": {
            "type": "boolean"
          },
          "replacePDF": {
            "type": "boolean"
          }
        },
        "required": [
          "fileMetadata",
          "isMainFile",
          "replacePDF"
        ]
      },
      "UserPrivateDTO": {
        "type": "object",
        "properties": {
          "userType": {
            "example": "Medical",
            "$ref": "#/components/schemas/UserType"
          },
          "userId": {
            "type": "string",
            "description": "User ID string",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "providerIds": {
            "description": "User provider ids",
            "example": [
              "google|qwerasdfqwerer"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starredDeposits": {
            "description": "Publications where the user is mentioned as author or submitter in the platform",
            "example": "[63a09f6ce3d5ff0813586171,63a09f6ce3d5ff0813586176]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isOnboarded": {
            "type": "boolean",
            "description": "Check if the user has finished the sign-up",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "example@example.com"
          },
          "emailPendingConfirmation": {
            "type": "string",
            "description": "Temporary value when the user is confirming a new email",
            "example": false
          },
          "roles": {
            "description": "User roles in the platform",
            "example": "[moderator, admin]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "percentageComplete": {
            "type": "number",
            "description": "User profile completion percentage",
            "example": 66
          },
          "inviteToken": {
            "type": "string",
            "description": "User invitation url",
            "example": "https://www.example.com"
          },
          "acceptedTC": {
            "type": "boolean",
            "description": "Check if the user has accepted the Terms and Conditions",
            "example": true
          },
          "impersonatedUser": {
            "type": "string",
            "description": "Check if the user is impersonating another user",
            "example": false
          },
          "iThenticateEULAAccepted": {
            "type": "boolean",
            "description": "Check if the user has accepted the ithenticate eula",
            "example": false
          },
          "_id": {
            "type": "string",
            "description": "User ID ObjectID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "doe"
          },
          "nickname": {
            "type": "string",
            "description": "User nickname",
            "example": "john-doe"
          },
          "institutions": {
            "description": "Institutions of the user",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orcid": {
            "type": "string",
            "description": "User orcid",
            "example": "0000-0001-5000-0007"
          },
          "disciplines": {
            "description": "User disciplines",
            "example": "Medical",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aboutMe": {
            "type": "string",
            "description": "User description",
            "example": "Working in the tech department"
          },
          "blog": {
            "type": "string",
            "description": "Blog url",
            "example": "https://myblog.com"
          },
          "role": {
            "type": "string",
            "description": "User role in the platform",
            "example": "moderator"
          },
          "linkedin": {
            "type": "string",
            "description": "User linkedin url",
            "example": "https://www.linkedin.com/in/john-doe"
          },
          "bannerURL": {
            "type": "string",
            "description": "The url of the image put in the profile banner",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/banner.png"
          },
          "gravatar": {
            "type": "string",
            "description": "Author gravatar md5 hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "actions": {
            "description": "User actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "userType",
          "userId",
          "providerIds",
          "starredDeposits",
          "isOnboarded",
          "roles",
          "percentageComplete",
          "acceptedTC",
          "_id",
          "firstName",
          "lastName",
          "nickname",
          "institutions",
          "disciplines",
          "actions"
        ]
      },
      "UserPublicDTO": {
        "type": "object",
        "properties": {
          "userType": {
            "example": "Medical",
            "$ref": "#/components/schemas/UserType"
          },
          "_id": {
            "type": "string",
            "description": "User ID ObjectID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "doe"
          },
          "nickname": {
            "type": "string",
            "description": "User nickname",
            "example": "john-doe"
          },
          "institutions": {
            "description": "Institutions of the user",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orcid": {
            "type": "string",
            "description": "User orcid",
            "example": "0000-0001-5000-0007"
          },
          "disciplines": {
            "description": "User disciplines",
            "example": "Medical",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aboutMe": {
            "type": "string",
            "description": "User description",
            "example": "Working in the tech department"
          },
          "blog": {
            "type": "string",
            "description": "Blog url",
            "example": "https://myblog.com"
          },
          "role": {
            "type": "string",
            "description": "User role in the platform",
            "example": "moderator"
          },
          "linkedin": {
            "type": "string",
            "description": "User linkedin url",
            "example": "https://www.linkedin.com/in/john-doe"
          },
          "bannerURL": {
            "type": "string",
            "description": "The url of the image put in the profile banner",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/banner.png"
          },
          "gravatar": {
            "type": "string",
            "description": "Author gravatar md5 hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          },
          "actions": {
            "description": "User actions",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "userType",
          "_id",
          "firstName",
          "lastName",
          "nickname",
          "institutions",
          "disciplines",
          "actions"
        ]
      },
      "UserSummaryDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User ID ObjectID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "5fa1908fd29a17dc961cc435"
          },
          "firstName": {
            "type": "string",
            "description": "User fist name",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "doe"
          },
          "nickname": {
            "type": "string",
            "description": "User nickname",
            "example": "john-doe"
          },
          "gravatar": {
            "type": "string",
            "description": "User gravatar md5 hash",
            "example": "4d950dd20ef84d1ce7552c78c577ba00"
          },
          "institutions": {
            "description": "Institutions of the user",
            "example": "[Orvium]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bannerURL": {
            "type": "string",
            "description": "The url of the image put in the profile banner",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/banner.png"
          },
          "avatar": {
            "type": "string",
            "description": "The url of the image put in the profile avatar",
            "example": "https://s3.eu-central-1.amazonaws.com/public-files.example.com/profile/61f12bb224a817c22e70f108/media/avatar.png"
          }
        },
        "required": [
          "_id",
          "userId",
          "firstName",
          "lastName",
          "nickname",
          "gravatar",
          "institutions"
        ]
      },
      "UserType": {
        "type": "string",
        "description": "User type",
        "enum": [
          "student",
          "medical",
          "business",
          "researcher",
          "citizen",
          "academic"
        ]
      },
      "VideoDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Video name",
            "example": "example.mp4"
          },
          "videoUrl": {
            "type": "string",
            "description": "The url where the video is hosted",
            "example": "https://synthesia-ttv-data.s3-eu-west-1.amazonaws.com/video_data/af14d36d-cb9e-4ec7-a225-092ec509d8c8/transfers/target_transfer.mp4"
          },
          "videoType": {
            "type": "string",
            "description": "The type of the video file",
            "example": "video/mp4"
          },
          "actions": {
            "description": "Action that can be made in the video",
            "example": "[Update]",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "videoUrl",
          "videoType",
          "actions"
        ]
      },
      "iThenticate": {
        "type": "object",
        "properties": {
          "submissionStatus": {
            "$ref": "#/components/schemas/SimpleSubmissionResponseStatusEnum"
          },
          "similarityReportStatus": {
            "type": "string",
            "description": "iThenticate Similarity Report status",
            "enum": [
              "PENDING",
              "COMPLETE"
            ]
          },
          "submissionId": {
            "type": "string",
            "description": "iThenticate submission ID"
          },
          "submitter": {
            "type": "string",
            "description": "User ID of the submitter"
          }
        }
      },
      "webhookPayload": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "communityId": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "communityId"
        ]
      },
      "webhookStatusPayload": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "active"
        ]
      }
    }
  }
}
