/**
 * Orvium API
 *  This is the OpenAPI 3.0 specification for the Orvium REST API.  Some useful links:  - [Orvium website](https://orvium.io) 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OrderDTO } from './orderDTO';


export interface PaymentDTO { 
    /**
     * Payment ID
     */
    _id: string;
    /**
     * Customer email
     */
    customerEmail: string;
    /**
     * Customer Orvium user id
     */
    userId: string;
    /**
     * The Stripe account ID
     */
    stripeAccount: string;
    /**
     * Unique identifier for the Stripe object: Checkout Session
     */
    checkoutSessionId: string;
    /**
     * The name of the Stripe event
     */
    eventName: string;
    /**
     * The unique identifier for the Stripe event
     */
    eventId: string;
    /**
     * The status for the saved Stripe Checkout Session event. The status can be: \'open\', \'complete\', or \'expired\'. \'open\': The checkout session is still in progress. Payment processing has not started. \'complete\': The checkout session is complete. Payment processing may still be in progress. \'expired\': The checkout session has expired. No further processing will occur.
     */
    eventStatus: string;
    /**
     * This is the URL to view Stripe automatically generates receipt for this payment.
     */
    receiptUrl?: string;
    /**
     * The total amount of the payment
     */
    amountTotal: number;
    /**
     * The currency of the payment
     */
    currency: string;
    /**
     * The name of the Community in which the payment has been made
     */
    communityName: string;
    /**
     * The ID of the Community in which the payment has been made
     */
    community: string;
    /**
     * The date when the payment has been made
     */
    date: Date;
    /**
     * The order that has been made in this payment
     */
    order?: OrderDTO;
    /**
     * All the data of the event
     */
    eventContent: object;
    /**
     * List of actions available
     */
    actions: Array<string>;
}

